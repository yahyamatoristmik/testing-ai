import json
import os
from django.core.management.base import BaseCommand
from django.db import transaction
from django.conf import settings
from your_app.models import ScanTarget, ScanResult  # Ganti dengan model Anda

class Command(BaseCommand):
    help = 'Update vulnerability counts from ZAP scan JSON report'

    def add_arguments(self, parser):
        parser.add_argument('json_file', type=str, help='Path to JSON report file')
        parser.add_argument('target_url', type=str, help='Target URL that was scanned')

    def handle(self, *args, **options):
        json_file = options['json_file']
        target_url = options['target_url']

        # Debug info - tampilkan environment Jenkins jika ada
        self.stdout.write(f"Jenkins URL: {getattr(settings, 'JENKINS_URL', 'Not set')}")
        self.stdout.write(f"Jenkins Token: {getattr(settings, 'JENKINS_TOKEN', 'Not set')}")

        if not os.path.exists(json_file):
            self.stderr.write(self.style.ERROR(f"JSON file not found: {json_file}"))
            return

        try:
            # Baca dan parse JSON
            with open(json_file, 'r') as f:
                data = json.load(f)

            # Ekstrak summary dari JSON (sesuaikan dengan struktur actual)
            # Contoh struktur: {"summary": {"high": 5, "medium": 3, "low": 1}}
            summary = data.get('summary', {})
            high_count = summary.get('high', 0)
            medium_count = summary.get('medium', 0)
            low_count = summary.get('low', 0)

            # Cari target scan berdasarkan URL
            try:
                target = ScanTarget.objects.get(url=target_url)
            except ScanTarget.DoesNotExist:
                self.stderr.write(self.style.ERROR(f"Target not found: {target_url}"))
                return

            # Cari scan result yang sedang running untuk target ini
            scan_result = ScanResult.objects.filter(
                target=target,
                status='running'
            ).order_by('-scan_date').first()

            if not scan_result:
                self.stderr.write(self.style.WARNING(f"No running scan found for target: {target_url}. Creating new result."))
                # Jika tidak ada yang running, buat baru
                scan_result = ScanResult.objects.create(
                    target=target,
                    status='running',  # Akan diupdate ke completed
                    high_vulnerabilities=0,
                    medium_vulnerabilities=0,
                    low_vulnerabilities=0
                )

            # Update vulnerability counts
            with transaction.atomic():
                scan_result.high_vulnerabilities = high_count
                scan_result.medium_vulnerabilities = medium_count
                scan_result.low_vulnerabilities = low_count
                scan_result.status = 'completed'
                scan_result.save()

            self.stdout.write(self.style.SUCCESS(
                f"Successfully updated vulnerabilities for {target_url}: "
                f"High={high_count}, Medium={medium_count}, Low={low_count}"
            ))

        except json.JSONDecodeError as e:
            self.stderr.write(self.style.ERROR(f"Invalid JSON format: {str(e)}"))
        except Exception as e:
            self.stderr.write(self.style.ERROR(f"Error updating vulnerabilities: {str(e)}"))
