-- MySQL dump 10.13  Distrib 8.0.43, for Linux (x86_64)
--
-- Host: localhost    Database: django
-- ------------------------------------------------------
-- Server version	8.0.43-0ubuntu0.22.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `auth_group`
--

DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_group` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(80) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group`
--

LOCK TABLES `auth_group` WRITE;
/*!40000 ALTER TABLE `auth_group` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_group_permissions`
--

DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_group_permissions` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `group_id` int NOT NULL,
  `permission_id` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` (`group_id`,`permission_id`),
  KEY `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_group_permissio_permission_id_84c5c92e_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permissions_group_id_b120cbf9_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_group_permissions`
--

LOCK TABLES `auth_group_permissions` WRITE;
/*!40000 ALTER TABLE `auth_group_permissions` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_group_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_permission` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `content_type_id` int NOT NULL,
  `codename` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_permission_content_type_id_codename_01ab375a_uniq` (`content_type_id`,`codename`),
  CONSTRAINT `auth_permission_content_type_id_2f476e4b_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_permission`
--

LOCK TABLES `auth_permission` WRITE;
/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can view log entry',1,'view_logentry'),(5,'Can add permission',2,'add_permission'),(6,'Can change permission',2,'change_permission'),(7,'Can delete permission',2,'delete_permission'),(8,'Can view permission',2,'view_permission'),(9,'Can add group',3,'add_group'),(10,'Can change group',3,'change_group'),(11,'Can delete group',3,'delete_group'),(12,'Can view group',3,'view_group'),(13,'Can add user',4,'add_user'),(14,'Can change user',4,'change_user'),(15,'Can delete user',4,'delete_user'),(16,'Can view user',4,'view_user'),(17,'Can add content type',5,'add_contenttype'),(18,'Can change content type',5,'change_contenttype'),(19,'Can delete content type',5,'delete_contenttype'),(20,'Can view content type',5,'view_contenttype'),(21,'Can add session',6,'add_session'),(22,'Can change session',6,'change_session'),(23,'Can delete session',6,'delete_session'),(24,'Can view session',6,'view_session'),(25,'Can add dast',7,'add_dast'),(26,'Can change dast',7,'change_dast'),(27,'Can delete dast',7,'delete_dast'),(28,'Can view dast',7,'view_dast'),(29,'Can add sast',8,'add_sast'),(30,'Can change sast',8,'change_sast'),(31,'Can delete sast',8,'delete_sast'),(32,'Can view sast',8,'view_sast'),(33,'Can add Message',9,'add_message'),(34,'Can change Message',9,'change_message'),(35,'Can delete Message',9,'delete_message'),(36,'Can view Message',9,'view_message'),(37,'Can add DAST Scan Report',10,'add_dastscan'),(38,'Can change DAST Scan Report',10,'change_dastscan'),(39,'Can delete DAST Scan Report',10,'delete_dastscan'),(40,'Can view DAST Scan Report',10,'view_dastscan'),(41,'Can view own DAST scans only',10,'view_own_dastscan'),(42,'Can view all DAST scans',10,'view_all_dastscan'),(43,'Can add repository',11,'add_repository'),(44,'Can change repository',11,'change_repository'),(45,'Can delete repository',11,'delete_repository'),(46,'Can view repository',11,'view_repository'),(47,'Can add scan job',12,'add_scanjob'),(48,'Can change scan job',12,'change_scanjob'),(49,'Can delete scan job',12,'delete_scanjob'),(50,'Can view scan job',12,'view_scanjob'),(51,'Can add user scm profile',13,'add_userscmprofile'),(52,'Can change user scm profile',13,'change_userscmprofile'),(53,'Can delete user scm profile',13,'delete_userscmprofile'),(54,'Can view user scm profile',13,'view_userscmprofile'),(55,'Can add vulnerability report',14,'add_vulnerabilityreport'),(56,'Can change vulnerability report',14,'change_vulnerabilityreport'),(57,'Can delete vulnerability report',14,'delete_vulnerabilityreport'),(58,'Can view vulnerability report',14,'view_vulnerabilityreport');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user` (
  `id` int NOT NULL AUTO_INCREMENT,
  `password` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_login` datetime(6) DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL,
  `first_name` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL,
  `last_name` varchar(30) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(254) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user`
--

LOCK TABLES `auth_user` WRITE;
/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$1000000$ReS0StVpnm3ttdq73vrEIS$Xi/pmxgOWaGIlHF9zqNFYvm/tf9+oAvWWGvwJp2sAq8=','2025-09-29 02:51:13.266065',1,'root','','','minumsusuyuk@gmail.com',1,1,'2025-08-26 11:27:56.219757'),(2,'pbkdf2_sha256$1000000$jDtRV6I5wd2bqe7bICdla3$0ASmV3y9DoSTgrkn94AbQlNimnGOTweYLVnsVuPoFbg=','2025-09-29 02:49:09.019313',0,'dinda','','','',1,1,'2025-09-15 08:53:35.000000'),(3,'pbkdf2_sha256$1000000$WCYGORiLl9qEClIVOoqTeX$j4GipokjHdx74e9O/HRbDNLvVqM1anFx0KkU3+4JBo0=','2025-09-29 02:50:54.507322',0,'yoyo','','','',1,1,'2025-09-15 09:03:19.000000'),(4,'pbkdf2_sha256$1000000$WpzfnD47LlVSnwD8Iat9y4$cgYPx4mmrvXjMKaUDRDWigsy0d739pnz2JQz9cf/iKA=',NULL,0,'testuser','','','',0,1,'2025-09-26 02:28:16.262753');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user_groups` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `group_id` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_groups_user_id_group_id_94350c0c_uniq` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_97559544_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_97559544_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_6a12ed8b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_groups`
--

LOCK TABLES `auth_user_groups` WRITE;
/*!40000 ALTER TABLE `auth_user_groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `auth_user_groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `permission_id` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `auth_user_user_permissions_user_id_permission_id_14a6b632_uniq` (`user_id`,`permission_id`),
  KEY `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` (`permission_id`),
  CONSTRAINT `auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `auth_user_user_permissions`
--

LOCK TABLES `auth_user_user_permissions` WRITE;
/*!40000 ALTER TABLE `auth_user_user_permissions` DISABLE KEYS */;
INSERT INTO `auth_user_user_permissions` VALUES (2,2,37),(4,2,39),(8,2,40),(1,2,41),(10,2,43),(11,2,44),(12,2,45),(13,2,46),(14,2,47),(15,2,48),(16,2,49),(17,2,50),(18,2,51),(19,2,52),(20,2,53),(21,2,54),(22,2,55),(23,2,56),(24,2,57),(25,2,58),(6,3,37),(7,3,39),(9,3,40),(5,3,41),(42,4,43),(43,4,44),(44,4,45),(45,4,46),(46,4,47),(47,4,48),(48,4,49),(49,4,50),(50,4,51),(51,4,52),(52,4,53),(53,4,54),(54,4,55),(55,4,56),(56,4,57),(57,4,58);
/*!40000 ALTER TABLE `auth_user_user_permissions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dashboard_dast`
--

DROP TABLE IF EXISTS `dashboard_dast`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dashboard_dast` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `link` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_at` datetime(6) NOT NULL,
  `nama_website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dashboard_dast`
--

LOCK TABLES `dashboard_dast` WRITE;
/*!40000 ALTER TABLE `dashboard_dast` DISABLE KEYS */;
INSERT INTO `dashboard_dast` VALUES (1,'ffff','2025-09-02 03:16:28.504925','sentinel.investrpo.id/dast/hasil');
/*!40000 ALTER TABLE `dashboard_dast` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dashboard_sast`
--

DROP TABLE IF EXISTS `dashboard_sast`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dashboard_sast` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `nama_aplikasi` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `versi_aplikasi` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `hasil_scan` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `tanggal_scan` datetime(6) NOT NULL,
  `link_hasil_scan` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dashboard_sast`
--

LOCK TABLES `dashboard_sast` WRITE;
/*!40000 ALTER TABLE `dashboard_sast` DISABLE KEYS */;
INSERT INTO `dashboard_sast` VALUES (1,'wqfd','V1-344','asf','2025-09-02 03:16:45.176186','af');
/*!40000 ALTER TABLE `dashboard_sast` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dast_reports_dastscan`
--

DROP TABLE IF EXISTS `dast_reports_dastscan`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dast_reports_dastscan` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `target_url` varchar(500) NOT NULL,
  `scan_type` varchar(20) NOT NULL,
  `scan_date` datetime(6) NOT NULL,
  `completed_date` datetime(6) DEFAULT NULL,
  `status` varchar(20) NOT NULL,
  `results` json DEFAULT NULL,
  `vulnerabilities_found` int NOT NULL,
  `high_vulnerabilities` int NOT NULL,
  `medium_vulnerabilities` int NOT NULL,
  `low_vulnerabilities` int NOT NULL,
  `informational_vulnerabilities` int NOT NULL,
  `scan_duration` bigint DEFAULT NULL,
  `pages_crawled` int NOT NULL,
  `requests_made` int NOT NULL,
  `scan_config` json DEFAULT NULL,
  `active` tinyint(1) NOT NULL,
  `scheduled` tinyint(1) NOT NULL,
  `jenkins_build_number` int DEFAULT NULL,
  `json_report_path` varchar(500) DEFAULT NULL,
  `created_at` datetime(6) NOT NULL,
  `updated_at` datetime(6) NOT NULL,
  `owner_id` int DEFAULT NULL,
  `ai_analysis_date` datetime(6) DEFAULT NULL,
  `ai_analysis_status` varchar(20) NOT NULL,
  `ai_recommendations` json DEFAULT NULL,
  `report_token` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `jenkins_build_number` (`jenkins_build_number`),
  KEY `dast_reports_dastscan_owner_id_c9a86be4_fk_auth_user_id` (`owner_id`),
  CONSTRAINT `dast_reports_dastscan_owner_id_c9a86be4_fk_auth_user_id` FOREIGN KEY (`owner_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dast_reports_dastscan`
--

LOCK TABLES `dast_reports_dastscan` WRITE;
/*!40000 ALTER TABLE `dast_reports_dastscan` DISABLE KEYS */;
INSERT INTO `dast_reports_dastscan` VALUES (26,'test pinusi','https://pinusi.com','full','2025-09-23 09:57:59.976440','2025-09-23 10:02:16.263041','completed',NULL,20,0,4,9,7,234000000,0,0,'{\"jenkins\": {\"base_url\": \"http://sentinel.investpro.id:8080\", \"job_name\": \"DAST-Automasi\", \"username\": \"admin\", \"api_token\": \"11c405e35f3f22adeaa1473199d9bad0c9\", \"job_token\": \"opsitechsec2020\"}, \"scan_parameters\": {\"scan_type\": \"full\", \"target_url\": \"https://pinusi.com\", \"configured_at\": \"2025-09-23T09:57:52.030235+00:00\", \"auto_configured\": true}}',1,0,241,'/var/lib/jenkins/workspace/DAST-Automasi/zap-reports/zap-report-241.json','2025-09-23 09:57:52.030484','2025-09-23 10:03:46.091640',1,'2025-09-23 10:03:46.091441','completed','{\"summary\": {\"target_url\": \"https://pinusi.com\", \"overall_risk\": \"high\", \"total_vulnerabilities\": 20}, \"recommendations\": [{\"title\": \"Perbaikan Cross-Site Scripting (XSS)\", \"action\": \"Validasi dan sanitasi semua input pengguna. Gunakan library seperti OWASP ESAPI untuk mencegah XSS.\", \"priority\": \"high\", \"description\": \"Terdeteksi kerentanan XSS yang memungkinkan penyerang menyuntikkan skrip berbahaya ke dalam halaman web.\"}, {\"title\": \"Perbaikan SQL Injection\", \"action\": \"Gunakan parameterized queries atau prepared statements untuk semua kueri database. Hindari penggunaan langsung input pengguna dalam kueri SQL.\", \"priority\": \"high\", \"description\": \"Terdeteksi kerentanan SQL Injection yang memungkinkan penyerang mengakses atau memanipulasi database.\"}, {\"title\": \"Perbaikan Cross-Site Request Forgery (CSRF)\", \"action\": \"Implementasikan token CSRF pada semua form dan request yang memerlukan autentikasi.\", \"priority\": \"high\", \"description\": \"Terdeteksi kerentanan CSRF yang memungkinkan penyerang melakukan tindakan atas nama pengguna yang terautentikasi.\"}, {\"title\": \"Perbaikan Masalah Keamanan Cookie\", \"action\": \"Setel flag \'Secure\' dan \'HttpOnly\' pada semua cookie untuk meningkatkan keamanan.\", \"priority\": \"medium\", \"description\": \"Terdeteksi masalah keamanan pada cookie seperti penggunaan flag \'Secure\' dan \'HttpOnly\' yang tidak tepat.\"}, {\"title\": \"Perbaikan Kesalahan Konfigurasi Server\", \"action\": \"Tinjau dan perbaiki konfigurasi server untuk memastikan bahwa informasi sensitif tidak terpapar.\", \"priority\": \"medium\", \"description\": \"Terdeteksi kesalahan konfigurasi server yang dapat mengekspos informasi sensitif.\"}, {\"title\": \"Perbaikan Kebocoran Informasi\", \"action\": \"Sembunyikan informasi sensitif seperti versi server atau framework dari header HTTP.\", \"priority\": \"medium\", \"description\": \"Terdeteksi kebocoran informasi seperti versi server atau framework yang digunakan.\"}, {\"title\": \"Perbaikan Masalah Keamanan Transport Layer\", \"action\": \"Pastikan menggunakan versi terbaru dari TLS (misalnya TLS 1.2 atau 1.3) dan nonaktifkan protokol yang tidak aman seperti SSLv2 dan SSLv3.\", \"priority\": \"low\", \"description\": \"Terdeteksi masalah pada lapisan transport seperti penggunaan protokol TLS yang tidak aman.\"}, {\"title\": \"Perbaikan Masalah Keamanan Content Security Policy (CSP)\", \"action\": \"Implementasikan CSP yang ketat untuk membatasi sumber daya yang dapat dimuat dan dieksekusi.\", \"priority\": \"low\", \"description\": \"Terdeteksi masalah pada kebijakan keamanan konten yang memungkinkan eksekusi skrip berbahaya.\"}]}','BS1_8QDPt7ld44xV5gG2ELp-FeZkwHKWOu7z86aTLZQ'),(27,'https://dropyourcargo.com/','https://dropyourcargo.com','full','2025-09-23 10:08:19.430938','2025-09-23 15:04:21.448319','completed',NULL,0,0,0,0,0,17750000000,0,0,'{\"jenkins\": {\"base_url\": \"http://sentinel.investpro.id:8080\", \"job_name\": \"DAST-Automasi\", \"username\": \"admin\", \"api_token\": \"11c405e35f3f22adeaa1473199d9bad0c9\", \"job_token\": \"opsitechsec2020\"}, \"scan_parameters\": {\"scan_type\": \"full\", \"target_url\": \"https://dropyourcargo.com\", \"configured_at\": \"2025-09-23T09:58:56.902523+00:00\", \"auto_configured\": true}}',1,0,242,'/var/lib/jenkins/workspace/DAST-Automasi/zap-reports/zap-report-242.json','2025-09-23 09:58:56.902835','2025-09-24 01:41:53.947576',1,'2025-09-24 01:41:53.947364','completed','{\"summary\": {\"target_url\": \"https://dropyourcargo.com\", \"overall_risk\": \"low\", \"total_vulnerabilities\": 0}, \"recommendations\": [{\"title\": \"Implementasi Perlindungan Header Keamanan\", \"action\": \"Tambahkan header keamanan HTTP seperti CSP, X-XSS-Protection, dan Strict-Transport-Security (HSTS) pada konfigurasi server.\", \"priority\": \"medium\", \"description\": \"Meskipun tidak ada kerentanan yang ditemukan, menambahkan header keamanan seperti Content Security Policy (CSP), X-Content-Type-Options, dan X-Frame-Options dapat meningkatkan pertahanan terhadap serangan seperti XSS dan clickjacking.\"}, {\"title\": \"Pemantauan dan Pembaruan Berkala\", \"action\": \"Jadwalkan pemindaian keamanan berkala dan pastikan semua dependensi (framework, library, CMS) selalu diperbarui.\", \"priority\": \"low\", \"description\": \"Keamanan website harus terus dipantau dan diperbarui untuk mengantisipasi kerentanan baru yang mungkin muncul di masa depan.\"}, {\"title\": \"Peningkatan Konfigurasi TLS/SSL\", \"action\": \"Gunakan protokol TLS 1.2/1.3, nonaktifkan protokol lama (SSLv3, TLS 1.0/1.1), dan pastikan cipher suites yang kuat diaktifkan.\", \"priority\": \"medium\", \"description\": \"Pastikan konfigurasi TLS/SSL mengikuti praktik terbaik untuk mencegah serangan seperti BEAST, POODLE, atau downgrade attacks.\"}, {\"title\": \"Pembatasan Akses ke Direktori dan File Sensitif\", \"action\": \"Gunakan file .htaccess (Apache) atau konfigurasi server (Nginx) untuk membatasi akses ke direktori/file tertentu.\", \"priority\": \"low\", \"description\": \"Membatasi akses ke file konfigurasi, backup, atau direktori admin dapat mengurangi risiko eksposur informasi sensitif.\"}, {\"title\": \"Implementasi Web Application Firewall (WAF)\", \"action\": \"Aktifkan WAF (misalnya Cloudflare, ModSecurity) dan sesuaikan aturan perlindungan sesuai kebutuhan.\", \"priority\": \"high\", \"description\": \"WAF dapat membantu memblokir serangan umum seperti SQL injection, XSS, atau DDoS sebelum mencapai aplikasi.\"}]}','brTwzdtfL2eUbMp6U327ZootsF2YtywsEp1GlEw6bLI'),(28,'infosulawesi','https://infosulawesi.com','full','2025-09-23 15:04:01.285459','2025-09-23 15:08:29.157251','completed',NULL,15,1,3,6,5,244000000,0,0,'{\"jenkins\": {\"base_url\": \"http://sentinel.investpro.id:8080\", \"job_name\": \"DAST-Automasi\", \"username\": \"admin\", \"api_token\": \"11c405e35f3f22adeaa1473199d9bad0c9\", \"job_token\": \"opsitechsec2020\"}, \"scan_parameters\": {\"scan_type\": \"full\", \"target_url\": \"https://infosulawesi.com\", \"configured_at\": \"2025-09-23T15:03:42.093951+00:00\", \"auto_configured\": true}}',1,0,243,'/var/lib/jenkins/workspace/DAST-Automasi@2/zap-reports/zap-report-243.json','2025-09-23 15:03:42.094370','2025-09-23 15:36:25.495718',2,'2025-09-23 15:36:25.495504','completed','{\"summary\": {\"target_url\": \"https://infosulawesi.com\", \"overall_risk\": \"high\", \"total_vulnerabilities\": 15}, \"recommendations\": [{\"title\": \"Perbaikan Cross-Site Scripting (XSS)\", \"action\": \"Validasi dan sanitasi semua input pengguna. Gunakan library keamanan seperti OWASP ESAPI atau framework yang mendukung sanitasi otomatis.\", \"priority\": \"high\", \"description\": \"Ditemukan kerentanan XSS pada beberapa halaman website yang memungkinkan penyerang menyuntikkan skrip berbahaya.\"}, {\"title\": \"Perbaikan SQL Injection\", \"action\": \"Gunakan prepared statements atau parameterized queries. Hindari penggunaan query SQL langsung dengan input pengguna.\", \"priority\": \"high\", \"description\": \"Ditemukan kerentanan SQL Injection yang memungkinkan penyerang mengakses atau memanipulasi database.\"}, {\"title\": \"Perbaikan Miskonfigurasi Server\", \"action\": \"Nonaktifkan informasi server yang tidak diperlukan. Konfigurasi ulang header HTTP untuk meningkatkan keamanan, seperti menambahkan Content Security Policy (CSP) dan Strict-Transport-Security (HSTS).\", \"priority\": \"medium\", \"description\": \"Server mengembalikan informasi sensitif seperti versi server dan header yang tidak aman.\"}, {\"title\": \"Perbaikan Cross-Site Request Forgery (CSRF)\", \"action\": \"Implementasikan token anti-CSRF pada semua form dan request yang memerlukan autentikasi.\", \"priority\": \"medium\", \"description\": \"Ditemukan kerentanan CSRF yang memungkinkan penyerang melakukan tindakan tidak sah atas nama pengguna yang terautentikasi.\"}, {\"title\": \"Perbaikan Masalah Caching Sensitif\", \"action\": \"Tambahkan header Cache-Control dengan nilai \'no-store\' atau \'no-cache\' pada halaman yang mengandung informasi sensitif.\", \"priority\": \"low\", \"description\": \"Beberapa halaman yang mengandung informasi sensitif di-cache oleh browser.\"}]}','IXUCOOIIf9lF8OF2YolWkaBO8EZfO5b2fSL89RMKoMk'),(29,'aa','https://blueraycargo.id','full','2025-09-24 02:25:16.124148','2025-09-24 02:29:32.659758','completed',NULL,16,0,3,7,6,235000000,0,0,'{\"jenkins\": {\"base_url\": \"http://sentinel.investpro.id:8080\", \"job_name\": \"DAST-Automasi\", \"username\": \"admin\", \"api_token\": \"11c405e35f3f22adeaa1473199d9bad0c9\", \"job_token\": \"opsitechsec2020\"}, \"scan_parameters\": {\"scan_type\": \"full\", \"target_url\": \"https://blueraycargo.id\", \"configured_at\": \"2025-09-24T02:23:45.283584+00:00\", \"auto_configured\": true}}',1,0,244,'/var/lib/jenkins/workspace/DAST-Automasi/zap-reports/zap-report-244.json','2025-09-24 02:23:45.283870','2025-09-24 02:50:16.191269',1,'2025-09-24 02:50:16.191068','completed','{\"summary\": {\"target_url\": \"https://blueraycargo.id\", \"overall_risk\": \"high\", \"total_vulnerabilities\": 16}, \"recommendations\": [{\"title\": \"Perbaikan Cross-Site Scripting (XSS)\", \"action\": \"Validasi dan sanitasi semua input pengguna, serta implementasikan Content Security Policy (CSP).\", \"priority\": \"high\", \"description\": \"Terdapat celah keamanan XSS yang memungkinkan penyerang menyuntikkan kode berbahaya ke dalam website.\"}, {\"title\": \"Peningkatan Keamanan Form Login\", \"action\": \"Implementasikan CAPTCHA, pembatasan percobaan login, dan menggunakan autentikasi multi-faktor (MFA).\", \"priority\": \"high\", \"description\": \"Form login rentan terhadap serangan brute-force atau credential stuffing.\"}, {\"title\": \"Perbaikan Masalah Mixed Content\", \"action\": \"Pastikan semua sumber daya dimuat melalui HTTPS untuk mencegah serangan man-in-the-middle (MITM).\", \"priority\": \"medium\", \"description\": \"Website memuat sumber daya (seperti gambar atau script) melalui HTTP yang tidak aman, meskipun website menggunakan HTTPS.\"}, {\"title\": \"Pengaturan Header Keamanan yang Lebih Baik\", \"action\": \"Tambahkan atau perbarui header keamanan untuk mencegah serangan seperti clickjacking dan MIME sniffing.\", \"priority\": \"medium\", \"description\": \"Header keamanan seperti X-Content-Type-Options, X-Frame-Options, dan Strict-Transport-Security tidak dikonfigurasi dengan optimal.\"}, {\"title\": \"Peningkatan Keamanan Cookie\", \"action\": \"Setel atribut Secure dan HttpOnly pada semua cookie untuk melindungi dari serangan XSS dan MITM.\", \"priority\": \"low\", \"description\": \"Cookie tidak disetel dengan atribut Secure dan HttpOnly, sehingga rentan terhadap pencurian.\"}, {\"title\": \"Perbaikan Masalah Informasi Sensitif di Source Code\", \"action\": \"Hapus atau amankan informasi sensitif dengan menyimpannya di environment variable atau vault yang aman.\", \"priority\": \"low\", \"description\": \"Informasi sensitif seperti kunci API atau kredensial ditemukan di source code website.\"}]}','MaDmQ-u18wReCwJZc2cIQKfIzhJOKPj92Z8LudxFkn8');
/*!40000 ALTER TABLE `dast_reports_dastscan` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_admin_log` (
  `id` int NOT NULL AUTO_INCREMENT,
  `action_time` datetime(6) NOT NULL,
  `object_id` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `object_repr` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `action_flag` smallint unsigned NOT NULL,
  `change_message` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `content_type_id` int DEFAULT NULL,
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `django_admin_log_content_type_id_c4bce8eb_fk_django_co` (`content_type_id`),
  KEY `django_admin_log_user_id_c564eba6_fk_auth_user_id` (`user_id`),
  CONSTRAINT `django_admin_log_content_type_id_c4bce8eb_fk_django_co` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_c564eba6_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `django_admin_log_chk_1` CHECK ((`action_flag` >= 0))
) ENGINE=InnoDB AUTO_INCREMENT=140 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_admin_log`
--

LOCK TABLES `django_admin_log` WRITE;
/*!40000 ALTER TABLE `django_admin_log` DISABLE KEYS */;
INSERT INTO `django_admin_log` VALUES (1,'2025-08-27 04:14:37.737899','3','DAST Scan investrpo - http://investpro.id',1,'[{\"added\": {}}]',10,1),(2,'2025-08-27 04:15:14.914639','3','DAST Scan investrpo - http://investpro.id',2,'[{\"changed\": {\"fields\": [\"Status\"]}}]',10,1),(3,'2025-08-27 04:16:02.046994','3','DAST Scan investrpo2 - http://investpro.id',2,'[{\"changed\": {\"fields\": [\"Name\", \"Scan type\", \"High Risk\", \"Medium Risk\", \"Low Risk\", \"Informational\"]}}]',10,1),(4,'2025-08-27 04:16:34.024923','3','DAST Scan investrpo2 - http://investpro.id',2,'[{\"changed\": {\"fields\": [\"Scan type\"]}}]',10,1),(5,'2025-08-27 04:23:28.278597','2','Test Scan - http://investpro.id',2,'[{\"changed\": {\"fields\": [\"Target URL\"]}}]',10,1),(6,'2025-08-28 13:32:09.066685','1','DAST Scan - https://danamon.oforu.id',2,'[{\"changed\": {\"fields\": [\"Target URL\"]}}]',10,1),(7,'2025-08-29 01:45:33.553335','2','Test Scan - http://investpro.id',2,'[]',10,1),(8,'2025-08-29 01:46:21.836099','2','Test Scan - http://investpro.id',3,'',10,1),(9,'2025-09-02 03:16:28.511395','1','sentinel.investrpo.id/dast/hasil',1,'[{\"added\": {}}]',7,1),(10,'2025-09-02 03:16:45.177400','1','wqfd',1,'[{\"added\": {}}]',8,1),(11,'2025-09-02 04:38:58.983890','4','scanmirasentinel.com - https://mirasentinel.com',1,'[{\"added\": {}}]',10,1),(12,'2025-09-03 02:46:36.569333','5','inpension - https://inpension.opsitech.id/',1,'[{\"added\": {}}]',10,1),(13,'2025-09-03 02:50:08.156106','6','test sayursehat - https://sayursehat.com',1,'[{\"added\": {}}]',10,1),(14,'2025-09-03 03:31:18.605951','5','inpension - https://inpension.opsitech.id/',3,'',10,1),(15,'2025-09-03 03:31:18.605986','4','scanmirasentinel.com - https://mirasentinel.com',3,'',10,1),(16,'2025-09-03 03:31:18.605999','3','DAST Scan investrpo2 - http://investpro.id',3,'',10,1),(17,'2025-09-03 03:31:18.606008','1','DAST Scan - https://danamon.oforu.id',3,'',10,1),(18,'2025-09-03 03:31:29.137544','6','test sayursehat - https://sayursehat.com',3,'',10,1),(19,'2025-09-03 03:32:02.095030','7','danamon - https://danamon.oforu.id',1,'[{\"added\": {}}]',10,1),(20,'2025-09-03 04:02:38.302361','8','http://testphp.vulnweb.com - http://testphp.vulnweb.com',1,'[{\"added\": {}}]',10,1),(21,'2025-09-03 09:17:48.372094','9','blueray.id - https://blueraycargo.id/',1,'[{\"added\": {}}]',10,1),(22,'2025-09-04 08:47:13.303067','9','blueray.id - https://blueraycargo.id/',3,'',10,1),(23,'2025-09-08 02:37:23.605861','10','DAST Scan - https://unifa.ac.id',1,'[{\"added\": {}}]',10,1),(24,'2025-09-08 04:09:10.198923','11','siska.unifa.ac.id - https://siska.unifa.ac.id',1,'[{\"added\": {}}]',10,1),(25,'2025-09-09 00:38:18.250185','12','https://infosulawesi.com/DAST Scan - https://infosulawesi.com/',1,'[{\"added\": {}}]',10,1),(26,'2025-09-09 10:34:45.076354','14','investpro.id - https://investpro.id/',1,'[{\"added\": {}}]',10,1),(27,'2025-09-09 10:46:40.367809','16','stmik profesionbla - https://stmikprofesional.ac.id',1,'[{\"added\": {}}]',10,1),(28,'2025-09-10 01:58:18.941792','15','investpro.id - https://investpro.id',3,'',10,1),(29,'2025-09-10 08:12:57.397352','18','blueray.id - https://blueraycargo.id/',1,'[{\"added\": {}}]',10,1),(30,'2025-09-11 02:02:53.801048','18','blueray.id - https://blueraycargo.id/',3,'',10,1),(31,'2025-09-11 02:03:12.515277','12','https://infosulawesi.com/DAST Scan - https://infosulawesi.com/',3,'',10,1),(32,'2025-09-11 02:04:02.386661','14','investpro.id - https://investpro.id/',3,'',10,1),(33,'2025-09-11 03:08:20.181159','22','Production Scan - https://target-application.com',3,'',10,1),(34,'2025-09-11 03:08:32.379355','21','Test with Config - http://test.com',3,'',10,1),(35,'2025-09-11 03:08:32.379387','20','Complete Test - http://example.com',3,'',10,1),(36,'2025-09-11 04:05:33.249696','23','Test Auto-Config - http://test.com',3,'',10,1),(37,'2025-09-11 07:00:37.571144','24','Scan Blueray Cargo - https://blueray-cargo.com',3,'',10,1),(38,'2025-09-11 07:01:45.945165','25','testunikokm - https://unikom.ac.id',1,'[{\"added\": {}}]',10,1),(39,'2025-09-11 07:01:59.897373','25','testunikokm - https://unikom.ac.id',3,'',10,1),(40,'2025-09-11 07:02:33.980142','26','add unikom - https://unikom.ac.id',1,'[{\"added\": {}}]',10,1),(41,'2025-09-11 11:30:09.021906','27','dast-sayursehat.com - https://sayursehat.com',1,'[{\"added\": {}}]',10,1),(42,'2025-09-12 04:07:01.183381','27','dast-sayursehat.com - https://sayursehat.com',3,'',10,1),(43,'2025-09-12 04:07:13.164493','28','dast-sayursehat.com - https://sayursehat.com',3,'',10,1),(44,'2025-09-12 04:09:29.518767','29','www.jamkrindo.co.id/ - https://www.jamkrindo.co.id/',1,'[{\"added\": {}}]',10,1),(45,'2025-09-12 04:53:47.513915','30','www.jamkrindo.co.id/ - https://www.jamkrindo.co.id',3,'',10,1),(46,'2025-09-12 04:53:47.513948','29','www.jamkrindo.co.id/ - https://www.jamkrindo.co.id/',3,'',10,1),(47,'2025-09-12 04:54:35.997380','31','https://inpension.opsitech.id/ - https://inpension.opsitech.id/',1,'[{\"added\": {}}]',10,1),(48,'2025-09-12 06:28:36.543247','31','https://inpension.opsitech.id/ - https://inpension.opsitech.id/',3,'',10,1),(49,'2025-09-12 06:32:33.368480','19','blueray.id - https://blueraycargo.id',3,'',10,1),(50,'2025-09-12 06:32:33.368513','17','investpro.id - https://investpro.id',3,'',10,1),(51,'2025-09-12 06:32:33.368522','16','stmik profesionbla - https://stmikprofesional.ac.id',3,'',10,1),(52,'2025-09-12 06:32:33.368530','13','https://infosulawesi.com/DAST Scan - https://infosulawesi.com',3,'',10,1),(53,'2025-09-12 06:32:33.368556','11','siska.unifa.ac.id - https://siska.unifa.ac.id',3,'',10,1),(54,'2025-09-12 06:32:33.368565','10','DAST Scan - https://unifa.ac.id',3,'',10,1),(55,'2025-09-12 06:32:33.368573','8','http://testphp.vulnweb.com - http://testphp.vulnweb.com',3,'',10,1),(56,'2025-09-12 06:32:33.368581','7','danamon - https://danamon.oforu.id',3,'',10,1),(57,'2025-09-12 07:16:22.961972','33','danamon.oforu.id - https://danamon.oforu.id',1,'[{\"added\": {}}]',10,1),(58,'2025-09-15 01:46:33.043327','33','danamon.oforu.id - https://danamon.oforu.id',3,'',10,1),(59,'2025-09-15 01:46:33.043361','32','https://inpension.opsitech.id/ - https://inpension.opsitech.id',3,'',10,1),(60,'2025-09-15 01:46:33.043371','26','add unikom - https://unikom.ac.id',3,'',10,1),(61,'2025-09-15 01:47:06.281060','34','danamon.oforu - https://danamon.oforu.id',1,'[{\"added\": {}}]',10,1),(62,'2025-09-15 01:52:43.418888','35','inpension - https://inpension.opsitech.id/',1,'[{\"added\": {}}]',10,1),(63,'2025-09-15 04:29:21.421047','36','inpension - https://inpension.opsitech.id',3,'',10,1),(64,'2025-09-15 04:29:21.421077','35','inpension - https://inpension.opsitech.id/',3,'',10,1),(65,'2025-09-15 04:29:34.410638','37','unifa - https://unifa.ac.id',1,'[{\"added\": {}}]',10,1),(66,'2025-09-15 04:41:47.605155','38','sayursehat.com - https://sayursehat.com',1,'[{\"added\": {}}]',10,1),(67,'2025-09-15 06:10:38.434101','37','unifa - https://unifa.ac.id',3,'',10,1),(68,'2025-09-15 06:10:38.434135','34','danamon.oforu - https://danamon.oforu.id',3,'',10,1),(69,'2025-09-15 06:10:52.514622','39','unifa - https://unifa.ac.id',1,'[{\"added\": {}}]',10,1),(70,'2025-09-15 08:51:53.374955','1','DAST Scan investrpo - https://investpro.id (System)',1,'[{\"added\": {}}]',10,1),(71,'2025-09-15 08:53:35.982462','2','dinda',1,'[{\"added\": {}}]',4,1),(72,'2025-09-15 08:54:37.573983','2','dinda',2,'[{\"changed\": {\"fields\": [\"Staff status\", \"User permissions\"]}}]',4,1),(73,'2025-09-15 09:03:20.161731','3','yoyo',1,'[{\"added\": {}}]',4,1),(74,'2025-09-15 09:03:58.793965','3','yoyo',2,'[{\"changed\": {\"fields\": [\"User permissions\"]}}]',4,1),(75,'2025-09-15 09:04:16.372902','2','dinda',2,'[{\"changed\": {\"fields\": [\"User permissions\"]}}]',4,1),(76,'2025-09-15 09:05:21.309106','3','yoyo',2,'[]',4,1),(77,'2025-09-15 09:05:39.916883','3','yoyo',2,'[{\"changed\": {\"fields\": [\"Staff status\"]}}]',4,1),(78,'2025-09-15 09:06:10.907665','2','DAST Scanblueay - https://blueraycargo.id (System)',1,'[{\"added\": {}}]',10,3),(79,'2025-09-15 09:07:35.867104','3','yoyo',2,'[]',4,1),(80,'2025-09-15 09:08:06.951988','3','DAST Scan unikom - https://unikom.ac.id (System)',1,'[{\"added\": {}}]',10,2),(81,'2025-09-15 09:09:07.646156','2','dinda',2,'[{\"changed\": {\"fields\": [\"User permissions\"]}}]',4,1),(82,'2025-09-15 09:09:20.089136','3','yoyo',2,'[{\"changed\": {\"fields\": [\"User permissions\"]}}]',4,1),(83,'2025-09-16 02:33:52.284468','4','test-yoyo - https://danamon.oforu.id (yoyo)',1,'[{\"added\": {}}]',10,3),(84,'2025-09-16 02:34:26.146789','5','DAST Scan-dinda - https://pinusi.com (dinda)',1,'[{\"added\": {}}]',10,2),(85,'2025-09-16 07:54:20.952771','4','test-yoyo - https://danamon.oforu.id (yoyo)',3,'',10,1),(86,'2025-09-16 07:54:20.952797','5','DAST Scan-dinda - https://pinusi.com (dinda)',3,'',10,1),(87,'2025-09-16 07:59:43.357707','6','DAST Scan - https://sayursehat.com (dinda)',1,'[{\"added\": {}}]',10,2),(88,'2025-09-16 10:20:50.583687','3','DAST Scan unikom - https://unikom.ac.id (System)',3,'',10,1),(89,'2025-09-16 10:20:59.842211','2','DAST Scanblueay - https://blueraycargo.id (System)',3,'',10,1),(90,'2025-09-16 10:20:59.842241','1','DAST Scan investrpo - https://investpro.id (System)',3,'',10,1),(91,'2025-09-16 10:22:45.532228','7','test-yoyo - https://inpension.opsitech.id (yoyo)',1,'[{\"added\": {}}]',10,3),(92,'2025-09-17 10:04:14.499884','8','danamon.ofor.id - https://danamon.oforu.id (dinda)',1,'[{\"added\": {}}]',10,2),(93,'2025-09-18 05:16:01.373312','6','DAST Scan - https://sayursehat.com (dinda)',3,'',10,2),(94,'2025-09-18 05:17:12.532423','9','DAST Scan - http://stmikprofesional.ac.id (yoyo)',1,'[{\"added\": {}}]',10,3),(95,'2025-09-18 05:19:03.840595','10','DAST Scan - http://stmikprofesional.ac.id (dinda)',1,'[{\"added\": {}}]',10,2),(96,'2025-09-18 05:23:00.562859','9','DAST Scan - http://stmikprofesional.ac.id (yoyo)',3,'',10,3),(97,'2025-09-18 05:29:14.023985','11','test-baru - https://sentinel.opsitech.id (yoyo)',1,'[{\"added\": {}}]',10,3),(98,'2025-09-18 05:30:57.534405','12','DAST Scan - https://apps.investpro.id (dinda)',1,'[{\"added\": {}}]',10,2),(99,'2025-09-18 06:22:55.342896','10','DAST Scan - http://stmikprofesional.ac.id (dinda)',3,'',10,2),(100,'2025-09-18 06:23:07.332313','13','DAST Scan - http://stmikprofesional.ac.id (dinda)',1,'[{\"added\": {}}]',10,2),(101,'2025-09-18 09:07:16.287980','14','https://sikembang.web.id/ - https://sikembang.web.id (dinda)',1,'[{\"added\": {}}]',10,2),(102,'2025-09-19 09:00:50.517440','11','test-baru - https://sentinel.opsitech.id (yoyo)',3,'',10,1),(103,'2025-09-19 09:00:50.517469','14','https://sikembang.web.id/ - https://sikembang.web.id (dinda)',3,'',10,1),(104,'2025-09-19 09:00:50.517480','13','DAST Scan - http://stmikprofesional.ac.id (dinda)',3,'',10,1),(105,'2025-09-19 09:00:50.517489','12','DAST Scan - https://apps.investpro.id (dinda)',3,'',10,1),(106,'2025-09-19 09:00:50.517498','8','danamon.ofor.id - https://danamon.oforu.id (dinda)',3,'',10,1),(107,'2025-09-19 09:00:50.517508','7','test-yoyo - https://inpension.opsitech.id (yoyo)',3,'',10,1),(108,'2025-09-19 09:01:10.584663','15','danamaon.oforu.id - https://danamon.oforu.id (root)',1,'[{\"added\": {}}]',10,1),(109,'2025-09-19 09:59:34.440078','16','sayursehat.com - https://sayursehat.com (root)',1,'[{\"added\": {}}]',10,1),(110,'2025-09-22 02:02:06.067485','17','investpro - http://investpro.id (root)',1,'[{\"added\": {}}]',10,1),(111,'2025-09-23 02:02:11.980261','17','investpro - http://investpro.id (root)',3,'',10,1),(112,'2025-09-23 02:02:52.009205','18','danamon.oforu.id - https://danamon.oforu.id (root)',1,'[{\"added\": {}}]',10,1),(113,'2025-09-23 04:26:16.645576','18','danamon.oforu.id - https://danamon.oforu.id (root)',3,'',10,1),(114,'2025-09-23 04:27:02.081321','16','sayursehat.com - https://sayursehat.com (root)',3,'',10,1),(115,'2025-09-23 04:27:02.081350','15','danamaon.oforu.id - https://danamon.oforu.id (root)',3,'',10,1),(116,'2025-09-23 04:28:19.797896','19','blueray-cargo.com - https://finmdn.blueray-cargo.com:8443/blueray-finance (root)',1,'[{\"added\": {}}]',10,1),(117,'2025-09-23 04:29:31.925150','19','blueray-cargo.com - https://finmdn.blueray-cargo.com:8443/blueray-finance (root)',3,'',10,1),(118,'2025-09-23 04:29:46.514137','20','investpro.id - http://investpro.id (root)',1,'[{\"added\": {}}]',10,1),(119,'2025-09-23 04:32:13.495824','20','investpro.id - https://investpro.id (root)',2,'[{\"changed\": {\"fields\": [\"Target URL\"]}}]',10,1),(120,'2025-09-23 04:46:21.435038','21','unifa.ac.id - https://unifa.ac.id (root)',1,'[{\"added\": {}}]',10,1),(121,'2025-09-23 05:06:58.952936','22','inpension - https://inpension.opsitech.id (root)',1,'[{\"added\": {}}]',10,1),(122,'2025-09-23 08:23:21.052727','22','inpension - https://inpension.opsitech.id (root)',3,'',10,1),(123,'2025-09-23 08:23:21.052769','21','unifa.ac.id - https://unifa.ac.id (root)',3,'',10,1),(124,'2025-09-23 08:23:21.052783','20','investpro.id - https://investpro.id (root)',3,'',10,1),(125,'2025-09-23 08:25:43.983083','23','https://manajemen.unifa.ac.id/ - https://manajemen.unifa.ac.id (root)',1,'[{\"added\": {}}]',10,1),(126,'2025-09-23 09:06:38.226024','24','https://lilasia.id - https://lilasia.id (root)',1,'[{\"added\": {}}]',10,1),(127,'2025-09-23 09:26:06.140205','24','https://lilasia.id - https://lilasia.id (root)',3,'',10,1),(128,'2025-09-23 09:26:30.572597','25','lilasia - https://lilasia.id (root)',1,'[{\"added\": {}}]',10,1),(129,'2025-09-23 09:56:28.293330','25','lilasia - https://lilasia.id (root)',3,'',10,1),(130,'2025-09-23 09:56:28.293356','23','https://manajemen.unifa.ac.id/ - https://manajemen.unifa.ac.id (root)',3,'',10,1),(131,'2025-09-23 09:57:52.031165','26','test pinusi - https://pinusi.com (root)',1,'[{\"added\": {}}]',10,1),(132,'2025-09-23 09:58:56.904152','27','https://dropyourcargo.com/ - https://dropyourcargo.com (root)',1,'[{\"added\": {}}]',10,1),(133,'2025-09-23 15:03:42.096176','28','infosulawesi - https://infosulawesi.com (dinda)',1,'[{\"added\": {}}]',10,2),(134,'2025-09-24 02:23:45.284599','29','aa - https://blueraycargo.id (root)',1,'[{\"added\": {}}]',10,1),(135,'2025-09-29 01:54:42.876987','1','root - gitlab',1,'[{\"added\": {}}]',13,1),(136,'2025-09-29 02:06:08.337087','1','root - gitlab',3,'',13,1),(137,'2025-09-29 02:08:54.324707','2','root - gitlab',1,'[{\"added\": {}}]',13,1),(138,'2025-09-29 02:10:21.055659','1','ai-dast-sast',1,'[{\"added\": {}}]',11,1),(139,'2025-09-29 02:10:53.278352','1','Scan ai-dast-sast - pending',1,'[{\"added\": {}}]',12,1);
/*!40000 ALTER TABLE `django_admin_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_content_type` (
  `id` int NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `model` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_model_76bd3d3b_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_content_type`
--

LOCK TABLES `django_content_type` WRITE;
/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (1,'admin','logentry','LogEntry'),(2,'auth','permission','Permission'),(3,'auth','group','Group'),(4,'auth','user','User'),(5,'contenttypes','contenttype','ContentType'),(6,'sessions','session','session'),(7,'dashboard','dast','dast'),(8,'dashboard','sast','sast'),(9,'message','message','message'),(10,'dast_reports','dastscan','dastscan'),(11,'sast_report','repository',''),(12,'sast_report','scanjob',''),(13,'sast_report','userscmprofile',''),(14,'sast_report','vulnerabilityreport','');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_migrations` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime(6) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=75 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_migrations`
--

LOCK TABLES `django_migrations` WRITE;
/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2025-09-15 06:31:43.999736'),(2,'auth','0001_initial','2025-09-15 06:31:44.007616'),(3,'admin','0001_initial','2025-09-15 06:31:44.014301'),(4,'admin','0002_logentry_remove_auto_add','2025-09-15 06:31:44.019432'),(5,'admin','0003_logentry_add_action_flag_choices','2025-09-15 06:31:44.025541'),(14,'auth','0002_alter_permission_name_max_length','2025-09-19 04:54:54.904126'),(15,'auth','0003_alter_user_email_max_length','2025-09-19 04:54:54.907401'),(16,'auth','0004_alter_user_username_opts','2025-09-19 04:54:54.910620'),(17,'auth','0005_alter_user_last_login_null','2025-09-19 04:54:54.912683'),(25,'dashboard','0001_initial','2025-09-19 04:55:02.473836'),(27,'message','0001_initial','2025-09-19 04:55:02.481837'),(28,'sessions','0001_initial','2025-09-19 04:55:02.483798'),(30,'contenttypes','0002_remove_content_type_name','2025-09-19 04:57:23.609485'),(31,'auth','0006_require_contenttypes_0002','2025-09-19 04:57:29.916012'),(32,'auth','0007_alter_validators_add_error_messages','2025-09-19 04:57:29.919514'),(33,'auth','0008_alter_user_username_max_length','2025-09-19 04:57:29.925151'),(34,'auth','0009_alter_user_last_name_max_length','2025-09-19 04:57:29.928704'),(35,'auth','0010_alter_group_name_max_length','2025-09-19 04:57:29.931331'),(36,'auth','0011_update_proxy_permissions','2025-09-19 04:57:29.934311'),(37,'auth','0012_alter_user_first_name_max_length','2025-09-19 04:57:29.936528'),(59,'dast_reports','0001_initial','2025-09-24 03:03:20.365528'),(60,'dast_reports','0002_add_owner_field','2025-09-24 03:03:20.368835'),(61,'dast_reports','0003_update_model_owner','2025-09-24 03:03:20.371838'),(62,'dast_reports','0004_add_ai_fields','2025-09-24 03:03:20.374039'),(69,'dast_reports','0005_userloginlog','2025-09-24 06:40:19.295287'),(70,'dast_reports','0006_userloginlog','2025-09-24 06:40:19.369562'),(71,'dast_reports','0007_delete_userloginlog','2025-09-24 06:40:19.384981'),(73,'sast_report','0001_initial','2025-09-29 01:45:31.157333');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `session_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `expire_date` datetime(6) NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_expire_date_a5c62663` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `django_session`
--

LOCK TABLES `django_session` WRITE;
/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('0dmztdc260s4ciqm4ludr4mgx42hhntj','.eJxVjEEOwiAQRe_C2hBoBwou3fcMZAozUjWQlHZlvLtt0oVu33v_v0XAbc1ha7SEOYmr6MTll00Yn1QOkR5Y7lXGWtZlnuSRyNM2OdZEr9vZ_h1kbHlfmwTGEg6MSIMyjhg56tj5fkcOLXsDDKC8RQekB1AaWFs3eVa96Ul8vvw1N-Y:1v14Xm:ehqdDZhXiQFLNS8X3-DKrABH54FlvIMGya1uqUI-Hjo','2025-10-07 15:03:02.339671'),('3a10ftgsl63bpfsytby6u724nk7ng3n7','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1v0cPm:SBxzQKySfiRRZn918g7TwkRA4kPUpHBWM-G1WAasaOo','2025-10-06 09:00:54.146860'),('a1h3ajk2nkhk522bswofapravl26m4ba','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1ur5lX:MGduzzQNecFa-kze15x6i1Z8mkOeUk78rlANgHo-KSU','2025-09-10 02:19:59.128784'),('bykwobp77tuqgtz2oj0p7dk079jpmnsn','.eJxVjEEOwiAQRe_C2hBoBwou3fcMZAozUjWQlHZlvLtt0oVu33v_v0XAbc1ha7SEOYmr6MTll00Yn1QOkR5Y7lXGWtZlnuSRyNM2OdZEr9vZ_h1kbHlfmwTGEg6MSIMyjhg56tj5fkcOLXsDDKC8RQekB1AaWFs3eVa96Ul8vvw1N-Y:1uz73c:nGO8zDWgGLx8PkT6Jd0vsUlUziKWfRe6ZbwNhBbthzg','2025-10-02 05:19:48.474445'),('cexwhkocrfkqi87t74kvnyexmq647ng6','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1uqwZw:_bjtmFNs8Xs6k6zBQraMxOZqBxMaIsJsx3j1hTUs-0E','2025-09-09 16:31:24.017755'),('fvmvaieqen3ubq4zvh40oizcbs6gjda1','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1v0cNy:-sBnhqnNH_FnfEUewfAknfr4WcfDE8VqvDG8738q5xA','2025-10-06 08:59:02.148803'),('imui9b0m3lwic3qnhsdddmhk851vk7nb','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1uqrqR:JDwzIuZLpCafNjXQi9Q2qH3UyrhaZHjDdL9YVKb9DgE','2025-09-09 11:28:07.668772'),('oglbucoowddj7urlm7ddsvqj8y4hef4t','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1uyVWC:H37iqvLJwxwxzJEACG1tKypdir9zHdMF527hQLcK9yI','2025-09-30 13:14:48.254713'),('qyb15yqvdbv1r1z7jkvpgjd9mvg73rfz','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1v0c6K:giJMROHmItItHT9slWQVw7_-UZG_zISzBx0mt2LpFtk','2025-10-06 08:40:48.341087'),('tybwsh8krw5st6pecj44nhdh74w4s5rz','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1uxybf:B4cNQ3GqKku9JH1MYy15KG8p9pL8VvByzC0kHcNZaPM','2025-09-29 02:06:15.728345'),('vvycj7mp9p0327nzd3mycug5iw1iqedb','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1v33yr:sU7I3P5qucGpSIELYGxbFFfuBRsRC3SLu971G1UsX60','2025-10-13 02:51:13.269587'),('w0m0zcb0n9a7uxt35f2pdsl73ne6egtt','.eJxVjEEOwiAQRe_C2hBwplRcuu8ZyDCDUjWQlHZlvLs26aLd_vfe_6hAy5zD0tIURlFXZdVpv0XiVyorkCeVR9VcyzyNUa-K3mjTQ5X0vm3u4SBTy_8ahDovYD2CdWKgdwh4Iew9MHsyzp1ZDJJF9kkEOmOZCPkuMUVGUd8fw5k4HA:1uvl7P:3Yh6rPsT-f-H6_SCgDfDFyOQZahFjx4FdDZjjDEk6KE','2025-09-22 23:17:51.287814');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `message_message`
--

DROP TABLE IF EXISTS `message_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `message_message` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(254) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `phone` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `company` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `subject` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `service` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `message` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `priority` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime(6) NOT NULL,
  `updated_at` datetime(6) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `message_mes_status_03314b_idx` (`status`,`created_at`),
  KEY `message_mes_priorit_ca2ec8_idx` (`priority`,`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `message_message`
--

LOCK TABLES `message_message` WRITE;
/*!40000 ALTER TABLE `message_message` DISABLE KEYS */;
INSERT INTO `message_message` VALUES (1,'yati','yahyamatoristmik@gmail.com','+6281543185791','jjj','fxgxfg','RedTeam','zxgxzg','unread','normal','2025-08-28 09:13:26.389415','2025-08-28 09:13:26.389459'),(2,'Tttt','yahyamatoristmik@gmail.com','+6281543185791','Hjhjj','Rtrt','SOC','Gjgj','unread','normal','2025-08-30 18:49:21.873259','2025-08-30 18:49:21.873293');
/*!40000 ALTER TABLE `message_message` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sast_report_repository`
--

DROP TABLE IF EXISTS `sast_report_repository`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sast_report_repository` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `repo_id` varchar(100) NOT NULL,
  `name` varchar(200) NOT NULL,
  `url` varchar(200) NOT NULL,
  `private` tinyint(1) NOT NULL,
  `default_branch` varchar(100) NOT NULL,
  `last_sync` datetime(6) DEFAULT NULL,
  `scm_profile_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `sast_report_repository_scm_profile_id_repo_id_3ef2c400_uniq` (`scm_profile_id`,`repo_id`),
  CONSTRAINT `sast_report_reposito_scm_profile_id_3804145e_fk_sast_repo` FOREIGN KEY (`scm_profile_id`) REFERENCES `sast_report_userscmprofile` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sast_report_repository`
--

LOCK TABLES `sast_report_repository` WRITE;
/*!40000 ALTER TABLE `sast_report_repository` DISABLE KEYS */;
INSERT INTO `sast_report_repository` VALUES (1,'74355192','ai-dast-sast','https://gitlab.com/yoyox/ai-dast-sast.git',0,'develop',NULL,2);
/*!40000 ALTER TABLE `sast_report_repository` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sast_report_scanjob`
--

DROP TABLE IF EXISTS `sast_report_scanjob`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sast_report_scanjob` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `branch` varchar(100) NOT NULL,
  `status` varchar(20) NOT NULL,
  `triggered_at` datetime(6) NOT NULL,
  `started_at` datetime(6) DEFAULT NULL,
  `finished_at` datetime(6) DEFAULT NULL,
  `log` longtext NOT NULL,
  `findings_count` int NOT NULL,
  `repository_id` bigint NOT NULL,
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`),
  KEY `sast_report_scanjob_repository_id_bc15c329_fk_sast_repo` (`repository_id`),
  KEY `sast_report_scanjob_user_id_0993f6d8_fk_auth_user_id` (`user_id`),
  CONSTRAINT `sast_report_scanjob_repository_id_bc15c329_fk_sast_repo` FOREIGN KEY (`repository_id`) REFERENCES `sast_report_repository` (`id`),
  CONSTRAINT `sast_report_scanjob_user_id_0993f6d8_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sast_report_scanjob`
--

LOCK TABLES `sast_report_scanjob` WRITE;
/*!40000 ALTER TABLE `sast_report_scanjob` DISABLE KEYS */;
INSERT INTO `sast_report_scanjob` VALUES (1,'develop','pending','2025-09-29 02:10:53.277476',NULL,NULL,'',0,1,1);
/*!40000 ALTER TABLE `sast_report_scanjob` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sast_report_userscmprofile`
--

DROP TABLE IF EXISTS `sast_report_userscmprofile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sast_report_userscmprofile` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `scm_type` varchar(20) NOT NULL,
  `access_token` longtext NOT NULL,
  `username` varchar(100) NOT NULL,
  `api_url` varchar(200) NOT NULL,
  `created_at` datetime(6) NOT NULL,
  `updated_at` datetime(6) NOT NULL,
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`),
  CONSTRAINT `sast_report_userscmprofile_user_id_be1b365a_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sast_report_userscmprofile`
--

LOCK TABLES `sast_report_userscmprofile` WRITE;
/*!40000 ALTER TABLE `sast_report_userscmprofile` DISABLE KEYS */;
INSERT INTO `sast_report_userscmprofile` VALUES (2,'gitlab','glpat-5jL0ErPQto8tIpmZTHEf2W86MQp1OjI1OGZmCw.01.1202qa5jv','yoyox','https://gitlab.com/api/v4/','2025-09-29 02:06:13.000000','2025-09-29 02:08:54.324181',1);
/*!40000 ALTER TABLE `sast_report_userscmprofile` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sast_report_vulnerabilityreport`
--

DROP TABLE IF EXISTS `sast_report_vulnerabilityreport`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sast_report_vulnerabilityreport` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `rule_id` varchar(200) NOT NULL,
  `severity` varchar(20) NOT NULL,
  `file_path` varchar(500) NOT NULL,
  `line_number` int NOT NULL,
  `message` longtext NOT NULL,
  `description` longtext NOT NULL,
  `recommendation` longtext NOT NULL,
  `metadata` json NOT NULL,
  `scan_job_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  KEY `sast_report_vulnerab_scan_job_id_51bbc97e_fk_sast_repo` (`scan_job_id`),
  CONSTRAINT `sast_report_vulnerab_scan_job_id_51bbc97e_fk_sast_repo` FOREIGN KEY (`scan_job_id`) REFERENCES `sast_report_scanjob` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1405 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sast_report_vulnerabilityreport`
--

LOCK TABLES `sast_report_vulnerabilityreport` WRITE;
/*!40000 ALTER TABLE `sast_report_vulnerabilityreport` DISABLE KEYS */;
INSERT INTO `sast_report_vulnerabilityreport` VALUES (1,'SQLI-001','HIGH','src/database.py',42,'Potential SQL injection vulnerability','User input directly used in SQL query without parameterization','Use parameterized queries or ORM to prevent SQL injection','{\"tool\": \"manual_scan\", \"confidence\": \"high\"}',1),(2,'XSS-001','MEDIUM','templates/user_profile.html',15,'Potential cross-site scripting (XSS) vulnerability','Unescaped user input rendered in HTML context','Escape all user inputs before rendering in HTML','{\"tool\": \"manual_scan\", \"confidence\": \"high\"}',1),(3,'AUTH-001','MEDIUM','middleware/auth.py',78,'Weak authentication mechanism','Session timeout too long or no proper logout mechanism','Implement proper session management with reasonable timeout','{\"tool\": \"manual_scan\", \"confidence\": \"high\"}',1),(4,'INFO-001','LOW','config/settings.py',23,'Debug mode enabled in production','DEBUG setting set to True in production environment','Set DEBUG=False in production and use proper logging','{\"tool\": \"manual_scan\", \"confidence\": \"high\"}',1),(5,'CRYPTO-001','HIGH','utils/encryption.py',56,'Weak encryption algorithm used','Using deprecated MD5 for password hashing','Use bcrypt or Argon2 for password hashing','{\"tool\": \"manual_scan\", \"confidence\": \"high\"}',1),(6,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dashboard/templates/dashboard/index.html',11,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(7,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dashboard/templates/dashboard/index.html',12,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(8,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dashboard/templates/dashboard/success.html',11,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(9,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dashboard/templates/dashboard/success.html',12,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(10,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dast_reports/templates/admin/dast_reports/ai_recommendations.html',7,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(11,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/dast_reports/templates/admin/dast_reports/dastscan_change_list.html',6,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(12,'python.django.security.audit.csrf-exempt.no-csrf-exempt','MEDIUM','/src/ai-evaluator/dashboard/dast_reports/views.py',62,'Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user\'s account and exfiltration of private data. Instead, create a function without this decorator.','Semgrep finding: python.django.security.audit.csrf-exempt.no-csrf-exempt','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(13,'python.django.security.audit.csrf-exempt.no-csrf-exempt','MEDIUM','/src/ai-evaluator/dashboard/dast_reports/views.py',93,'Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user\'s account and exfiltration of private data. Instead, create a function without this decorator.','Semgrep finding: python.django.security.audit.csrf-exempt.no-csrf-exempt','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(14,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/contact.html',8,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(15,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/contact.html',220,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(16,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/contact.html',221,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(17,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/success.html',7,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(18,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/success.html',157,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(19,'html.security.audit.missing-integrity.missing-integrity','MEDIUM','/src/ai-evaluator/dashboard/message/templates/message/success.html',158,'This tag is missing an \'integrity\' subresource integrity attribute. The \'integrity\' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the \'integrity\' attribute for all externally hosted files.','Semgrep finding: html.security.audit.missing-integrity.missing-integrity','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(20,'javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','MEDIUM','/src/ai-evaluator/dashboard/staticfiles-bk/admin/js/inlines.js',26,'RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.','Semgrep finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(21,'javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','MEDIUM','/src/ai-evaluator/dashboard/staticfiles/admin/js/inlines.js',26,'RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.','Semgrep finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(22,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/cache.py',26,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(23,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/commands/__init__.py',109,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(24,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/commands/search.py',5,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(25,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',52,'Detected a python logger call with a potential hardcoded secret \"Getting credentials from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(26,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',59,'Detected a python logger call with a potential hardcoded secret \"Getting password from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(27,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',124,'Detected a python logger call with a potential hardcoded secret \"Found credentials in url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(28,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',140,'Detected a python logger call with a potential hardcoded secret \"Found credentials in index url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(29,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',147,'Detected a python logger call with a potential hardcoded secret \"Found credentials in netrc for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(30,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',160,'Detected a python logger call with a potential hardcoded secret \"Found credentials in keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(31,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',305,'Detected a python logger call with a potential hardcoded secret \"401 Error, Credentials not correct for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(32,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/auth.py',321,'The password on \'keyring\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(*creds, user=keyring):\n                    keyring.set_password(*creds)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(33,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/xmlrpc.py',6,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(34,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/network/xmlrpc.py',14,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(35,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/req/req_tracker.py',73,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(36,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/self_outdated_check.py',28,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(37,'python.lang.compatibility.python36.python36-compatibility-Popen1','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/utils/subprocess.py',141,'the `errors` argument to Popen is only available on Python 3.6+','Semgrep finding: python.lang.compatibility.python36.python36-compatibility-Popen1','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(38,'python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_internal/utils/unpacking.py',93,'These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.','Semgrep finding: python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(39,'python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http','LOW','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/cachecontrol/_cmd.py',27,'Detected a request using \'http://\'. This request will be unencrypted. Use \'https://\' instead.','Semgrep finding: python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(40,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py',103,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(41,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/cachecontrol/serialize.py',148,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(42,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/certifi/core.py',28,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(43,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/distlib/compat.py',42,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(44,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/distlib/compat.py',83,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(45,'python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/distlib/util.py',1531,'The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.','Semgrep finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(46,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/__init__.py',10,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(47,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py',89,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(48,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py',339,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(49,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(50,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(51,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(52,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(53,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',1462,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(54,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',1469,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(55,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/platformdirs/__init__.py',29,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(56,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pygments/formatters/__init__.py',101,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(57,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pygments/lexers/__init__.py',140,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(58,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pygments/unistring.py',83,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(59,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/pygments/unistring.py',90,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(60,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/requests/auth.py',154,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(x)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(61,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/requests/auth.py',198,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(s)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(62,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/rich/style.py',193,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(63,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/rich/style.py',260,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(64,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/rich/style.py',490,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(65,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/rich/style.py',745,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(66,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',90,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(67,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',94,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(68,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',97,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(69,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',163,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(70,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',168,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(71,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',173,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(72,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',178,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(73,'python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/util/ssl_.py',179,'\'ssl.wrap_socket()\' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using \'ssl.SSLContext()\' and use that to wrap a socket.','Semgrep finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(74,'python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/urllib3/util/ssl_.py',292,'The \'ssl\' module disables insecure cipher suites by default. Therefore, use of \'set_ciphers()\' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.','Semgrep finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(75,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pip/_vendor/webencodings/mklabels.py',47,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(76,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',136,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(77,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',136,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(78,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',143,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(79,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',143,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(80,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',1453,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(81,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',1460,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(82,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/pkg_resources/__init__.py',2229,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(83,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/_distutils/command/register.py',89,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(84,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/_distutils/command/upload.py',194,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(85,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/_distutils/core.py',230,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(86,'python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','HIGH','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/_distutils/cygwinccompiler.py',401,'Found \'subprocess\' function \'Popen\' with \'shell=True\'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use \'shell=False\' instead.','Semgrep finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','False','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(87,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/_distutils/sysconfig.py',530,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(88,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/build_meta.py',158,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(89,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/command/bdist_egg.py',376,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(90,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/command/easy_install.py',1078,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(91,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/command/easy_install.py',1082,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(92,'python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/command/upload_docs.py',170,'The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.','Semgrep finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(93,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/config.py',422,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(94,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/depends.py',112,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(95,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/depends.py',172,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(96,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/launch.py',32,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(97,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/monkey.py',149,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(98,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/package_index.py',1153,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(99,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/sandbox.py',46,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(100,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/sandbox.py',108,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(101,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.10/site-packages/setuptools/sandbox.py',108,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(102,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/MySQLdb/cursors.py',270,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(103,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/MySQLdb/cursors.py',275,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(104,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/backports/zoneinfo/_common.py',6,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(105,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/backports/zoneinfo/_tzpath.py',143,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(106,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',111,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(107,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',123,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(108,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',178,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(109,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',193,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(110,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',210,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(111,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/apps/config.py',269,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(112,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/conf/__init__.py',217,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(113,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/helpers.py',159,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(114,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/helpers.py',189,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(115,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/helpers.py',195,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(116,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/options.py',362,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(117,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/options.py',364,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(118,'python.django.security.injection.open-redirect.open-redirect','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/options.py',1398,'Data from request (redirect_url) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.','Semgrep finding: python.django.security.injection.open-redirect.open-redirect','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(119,'python.django.security.injection.open-redirect.open-redirect','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/options.py',1460,'Data from request (redirect_url) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.','Semgrep finding: python.django.security.injection.open-redirect.open-redirect','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(120,'javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/static/admin/js/inlines.js',26,'RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.','Semgrep finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(121,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/actions.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(122,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/actions.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(123,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/app_list.html',8,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(124,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/auth/user/change_password.html',25,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(125,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/auth/user/change_password.html',29,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(126,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_form.html',21,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(127,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_form.html',43,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(128,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_list.html',52,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(129,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_list.html',61,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(130,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_list_object_tools.html',8,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(131,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/change_list_results.html',17,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(132,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',25,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(133,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',30,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(134,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',35,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(135,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(136,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',26,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(137,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',29,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(138,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/filter.html',4,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(139,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/login.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(140,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/login.html',39,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(141,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/login.html',46,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(142,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/object_history.html',49,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(143,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/search_form.html',9,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(144,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/search_form.html',9,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(145,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',11,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(146,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(147,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',27,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(148,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',34,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(149,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/registration/password_change_form.html',25,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(150,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/registration/password_reset_confirm.html',18,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(151,'python.django.security.audit.xss.template-autoescape-off.template-autoescape-off','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',1,'Detected a template block where autoescaping is explicitly disabled with \'{% autoescape off %}\'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.','Semgrep finding: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(152,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',2,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(153,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',12,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(154,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py',240,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(155,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py',288,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(156,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py',319,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(157,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admin/templatetags/admin_list.py',500,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(158,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/bookmarklets.html',15,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(159,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',14,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(160,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',17,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(161,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(162,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/model_detail.html',21,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(163,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',13,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(164,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(165,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(166,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/template_filter_index.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(167,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/template_tag_index.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(168,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/view_detail.html',12,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(169,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(170,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',40,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(171,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',42,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(172,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',49,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(173,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/utils.py',88,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(174,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/views.py',175,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(175,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/admindocs/views.py',182,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(176,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/base_user.py',118,'The password on \'self\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(raw_password, user=self):\n                self.set_password(raw_password)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(177,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/forms.py',151,'The password on \'user\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(self.cleaned_data[\"password1\"], user=user):\n            user.set_password(self.cleaned_data[\"password1\"])','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(178,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/forms.py',322,'Detected a python logger call with a potential hardcoded secret \"Failed to send password reset email to %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(179,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/forms.py',431,'The password on \'self.user\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(password, user=self.user):\n            self.user.set_password(password)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(180,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/forms.py',514,'The password on \'self.user\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(password, user=self.user):\n            self.user.set_password(password)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(181,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/hashers.py',209,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(182,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/hashers.py',651,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256((salt + password).encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(183,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/hashers.py',753,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(password.encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(184,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/management/commands/changepassword.py',78,'The password on \'u\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(p1, user=u):\n            u.set_password(p1)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(185,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/auth/templates/registration/password_reset_subject.txt',2,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(186,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/contenttypes/views.py',86,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(187,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/flatpages/views.py',67,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(188,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/flatpages/views.py',68,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(189,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/flatpages/views.py',70,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(190,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/mysql/introspection.py',17,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(191,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/mysql/introspection.py',17,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(192,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/mysql/schema.py',65,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(193,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/oracle/operations.py',53,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(194,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/oracle/schema.py',80,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(195,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/oracle/schema.py',93,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(196,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/oracle/schema.py',101,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(197,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/operations.py',43,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(198,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/operations.py',99,'Found extension of custom expression: ST_Polygon. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(199,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/operations.py',334,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(200,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/postgis/operations.py',334,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(201,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',20,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(202,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',153,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(203,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',153,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(204,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',69,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(205,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',76,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(206,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',101,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(207,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',145,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(208,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',157,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(209,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',170,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(210,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',181,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(211,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/aggregates.py',25,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(212,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/aggregates.py',43,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(213,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/aggregates.py',46,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(214,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',68,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(215,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',110,'Found extension of custom expression: GeoFunc. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(216,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',136,'Detected a Custom Expression \'\'copy\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(217,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',152,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(218,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',169,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(219,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',175,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(220,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',206,'Detected a Custom Expression \'\'super(AsGeoJSON, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(221,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',229,'Detected a Custom Expression \'\'super(AsGML, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(222,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',334,'Detected a Custom Expression \'\'super(Distance, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(223,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',345,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(224,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',382,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(225,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',427,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(226,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',442,'Detected a Custom Expression \'\'super(Length, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(227,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',450,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(228,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',490,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(229,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/functions.py',495,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(230,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/gis/db/models/lookups.py',90,'Detected a Custom Expression \'\'rhs_op\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(231,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/humanize/templatetags/humanize.py',23,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(232,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/humanize/templatetags/humanize.py',61,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(233,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/humanize/templatetags/humanize.py',64,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(234,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/humanize/templatetags/humanize.py',148,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(235,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/messages/storage/cookie.py',38,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(236,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/aggregates/mixins.py',28,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(237,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/constraints.py',102,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(238,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/expressions.py',6,'Found extension of custom expression: ArraySubquery. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(239,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/fields/ranges.py',29,'Found extension of custom expression: RangeBoundary. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(240,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/functions.py',4,'Found extension of custom expression: RandomUUID. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(241,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/functions.py',9,'Found extension of custom expression: TransactionNow. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(242,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/indexes.py',238,'Found extension of custom expression: OpClass. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(243,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',27,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(244,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',27,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(245,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',47,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(246,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',47,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(247,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',197,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(248,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',197,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(249,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',208,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(250,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',208,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(251,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',286,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(252,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',306,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(253,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/operations.py',306,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(254,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',47,'Found extension of custom expression: SearchConfig. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(255,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',90,'Found extension of custom expression: SearchVector. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(256,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',135,'Detected a Custom Expression \'\'super(SearchVector, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(257,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',186,'Found extension of custom expression: SearchQuery. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(258,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',217,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(259,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',241,'Found extension of custom expression: SearchRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(260,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',274,'Found extension of custom expression: SearchHeadline. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(261,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',326,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(262,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',339,'Found extension of custom expression: TrigramBase. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(263,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/postgres/search.py',348,'Found extension of custom expression: TrigramWordBase. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(264,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/sessions/management/commands/clearsessions.py',14,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(265,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/sessions/middleware.py',15,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(266,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/sitemaps/__init__.py',29,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(267,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/contrib/sitemaps/views.py',74,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(268,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',68,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(269,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',95,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(270,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',120,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(271,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',120,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(272,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',132,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(273,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',142,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(274,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',168,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(275,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',176,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(276,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',187,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(277,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',223,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(278,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',244,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(279,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',262,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(280,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',274,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(281,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',279,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(282,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',293,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(283,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/db.py',293,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(284,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/filebased.py',36,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(285,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/filebased.py',43,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(286,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/filebased.py',44,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(287,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/filebased.py',69,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(288,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/filebased.py',153,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(289,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/locmem.py',27,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(290,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/locmem.py',42,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(291,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/locmem.py',53,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(292,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/locmem.py',72,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(293,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/locmem.py',74,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(294,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/redis.py',21,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(295,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/cache/backends/redis.py',27,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(296,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/management/__init__.py',48,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(297,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/management/commands/shell.py',78,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(298,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/management/commands/shell.py',117,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(299,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/management/commands/shell.py',127,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(300,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/management/templates.py',281,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(301,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/serializers/__init__.py',72,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(302,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/serializers/base.py',30,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(303,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/serializers/base.py',33,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(304,'python.lang.compatibility.python37.python37-compatibility-math1','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/core/validators.py',416,'math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate a - n* b.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-math1','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(305,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',187,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(306,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',187,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(307,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',225,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(308,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',225,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(309,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',324,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(310,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/creation.py',324,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(311,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/operations.py',370,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(312,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',487,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(313,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',627,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(314,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',641,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(315,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',651,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(316,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',713,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(317,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',727,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(318,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',767,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(319,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1056,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(320,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1066,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(321,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1078,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(322,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1136,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(323,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1183,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(324,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/base/schema.py',1830,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(325,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/base.py',336,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(326,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/base.py',336,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(327,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/compiler.py',10,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(328,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/compiler.py',38,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(329,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/compiler.py',57,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(330,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/creation.py',55,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(331,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/creation.py',55,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(332,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/introspection.py',151,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(333,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/introspection.py',151,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(334,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/introspection.py',323,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(335,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/introspection.py',323,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(336,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/mysql/schema.py',113,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(337,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/base.py',273,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(338,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/base.py',287,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(339,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/creation.py',330,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(340,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/functions.py',4,'Found extension of custom expression: IntervalToSeconds. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(341,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/functions.py',19,'Found extension of custom expression: SecondsToInterval. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(342,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/introspection.py',176,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(343,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/introspection.py',176,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(344,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/operations.py',335,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(345,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/operations.py',335,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(346,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',54,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(347,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',54,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(348,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',144,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(349,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',144,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(350,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',229,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(351,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/oracle/schema.py',229,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(352,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/postgresql/creation.py',82,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(353,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/postgresql/creation.py',82,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(354,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/postgresql/introspection.py',112,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(355,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/postgresql/introspection.py',112,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(356,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/postgresql/schema.py',203,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(357,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/_functions.py',444,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','sha256(text.encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(358,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/_functions.py',450,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(359,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py',247,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(360,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py',247,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(361,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py',259,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(362,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py',259,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(363,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/base.py',266,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(364,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',93,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(365,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',93,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(366,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',144,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(367,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',144,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(368,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',160,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(369,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',160,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(370,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',312,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(371,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',312,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(372,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',326,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(373,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',326,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(374,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',333,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(375,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',333,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(376,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',349,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(377,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/introspection.py',349,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(378,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/operations.py',165,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(379,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',164,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(380,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',164,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(381,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',336,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(382,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',336,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(383,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',370,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(384,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',531,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(385,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/backends/sqlite3/schema.py',531,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(386,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/loader.py',86,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(387,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/loader.py',120,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(388,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/questioner.py',45,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(389,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/questioner.py',162,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(390,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/writer.py',221,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(391,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/migrations/writer.py',246,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(392,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/aggregates.py',25,'Found extension of custom expression: Aggregate. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(393,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/aggregates.py',119,'Detected a Custom Expression \'\'self.filter\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(394,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/aggregates.py',126,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(395,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/aggregates.py',140,'Detected a Custom Expression \'\'super(Aggregate, copy)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(396,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/aggregates.py',143,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(397,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/constraints.py',75,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(398,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/constraints.py',200,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(399,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',28,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(400,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',760,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(401,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',776,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(402,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1224,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(403,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1250,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(404,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1303,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(405,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1558,'Detected a Custom Expression \'\'self.query\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(406,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1661,'Detected a Custom Expression \'\'copy\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(407,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1662,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(408,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1748,'Detected a Custom Expression \'\'self.partition_by\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(409,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/expressions.py',1781,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(410,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/json.py',260,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(411,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/json.py',288,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(412,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/json.py',490,'Detected a Custom Expression \'\'HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(413,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/json.py',558,'Detected a Custom Expression \'\'is_null_expr\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(414,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/json.py',563,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(415,'python.django.security.audit.query-set-extra.avoid-query-set-extra','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py',1110,'QuerySet.extra\' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using \'.extra\', use the Django ORM and parameterized queries such as `People.objects.get(name=\'Bob\')`.','Semgrep finding: python.django.security.audit.query-set-extra.avoid-query-set-extra','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(416,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py',147,'Detected a Custom Expression \'\'root_constraint\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(417,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py',148,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(418,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py',184,'Detected a Custom Expression \'\'root_constraint\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(419,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/fields/related_lookups.py',185,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(420,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',9,'Found extension of custom expression: Cast. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(421,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',20,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(422,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',27,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(423,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',35,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(424,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',38,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(425,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',49,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(426,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',55,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(427,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',66,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(428,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',69,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(429,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',72,'Found extension of custom expression: Coalesce. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(430,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',101,'Detected a Custom Expression \'\'super(Coalesce, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(431,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',102,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(432,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',105,'Found extension of custom expression: Collate. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(433,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',120,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(434,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',123,'Found extension of custom expression: Greatest. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(435,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',144,'Found extension of custom expression: JSONObject. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(436,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',159,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(437,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',169,'Detected a Custom Expression \'\'super(JSONObject, copy)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(438,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',182,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(439,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',191,'Found extension of custom expression: Least. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(440,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',212,'Found extension of custom expression: NullIf. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(441,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/comparison.py',220,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(442,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/datetime.py',214,'Found extension of custom expression: Now. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(443,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/datetime.py',222,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(444,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/datetime.py',227,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(445,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/datetime.py',232,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(446,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',33,'Found extension of custom expression: ATan2. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(447,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',41,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(448,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',56,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(449,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',64,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(450,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',77,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(451,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',87,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(452,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',110,'Found extension of custom expression: Log. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(453,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',116,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(454,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',121,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(455,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',124,'Found extension of custom expression: Mod. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(456,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',129,'Found extension of custom expression: Pi. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(457,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',134,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(458,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',139,'Found extension of custom expression: Power. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(459,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',149,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(460,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',157,'Found extension of custom expression: Random. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(461,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',162,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(462,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',165,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(463,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/math.py',170,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(464,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/mixins.py',23,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(465,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/mixins.py',28,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(466,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/mixins.py',47,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(467,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',10,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(468,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',20,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(469,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',33,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(470,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',47,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(471,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',56,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(472,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',64,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(473,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',67,'Found extension of custom expression: ConcatPair. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(474,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',77,'Detected a Custom Expression \'\'super(ConcatPair, coalesced)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(475,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',93,'Detected a Custom Expression \'\'super(ConcatPair, copy)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(476,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',101,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(477,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',121,'Found extension of custom expression: Concat. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(478,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',146,'Found extension of custom expression: Left. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(479,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',179,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(480,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',189,'Found extension of custom expression: LPad. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(481,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',219,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(482,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',222,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(483,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',225,'Found extension of custom expression: Repeat. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(484,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',242,'Detected a Custom Expression \'\'rpad\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(485,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',245,'Found extension of custom expression: Replace. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(486,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',259,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(487,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',318,'Found extension of custom expression: StrIndex. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(488,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',330,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(489,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',333,'Found extension of custom expression: Substr. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(490,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',352,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(491,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/text.py',355,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(492,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',19,'Found extension of custom expression: CumeDist. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(493,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',25,'Found extension of custom expression: DenseRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(494,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',31,'Found extension of custom expression: FirstValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(495,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',37,'Found extension of custom expression: LagLeadFunction. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(496,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',64,'Found extension of custom expression: LastValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(497,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',74,'Found extension of custom expression: NthValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(498,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',94,'Found extension of custom expression: Ntile. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(499,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',105,'Found extension of custom expression: PercentRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(500,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',111,'Found extension of custom expression: Rank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(501,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/functions/window.py',117,'Found extension of custom expression: RowNumber. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(502,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/indexes.py',89,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(503,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/indexes.py',211,'Found extension of custom expression: IndexExpression. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(504,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/indexes.py',295,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(505,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',20,'Found extension of custom expression: Lookup. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(506,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',148,'Detected a Custom Expression \'\'lookup\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(507,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',189,'Found extension of custom expression: Transform. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(508,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',357,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(509,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',465,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(510,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',594,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(511,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/lookups.py',637,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(512,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/manager.py',63,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(513,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',30,'Found extension of custom expression: PositionRef. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(514,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',253,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(515,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',411,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(516,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',424,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(517,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',431,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(518,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',546,'Detected a Custom Expression \'\'node\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(519,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',587,'Detected a Custom Expression \'\'compiler\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(520,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',683,'Detected a Custom Expression \'\'inner_query_compiler\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(521,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',935,'Detected a Custom Expression \'\'select_clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(522,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1549,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(523,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1605,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(524,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1607,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(525,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1821,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(526,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1906,'Detected a Custom Expression \'\'innerq.get_compiler(connection=self.connection)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(527,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',1907,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(528,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/compiler.py',2078,'Detected a Custom Expression \'\'self.query.inner_query.get_compiler(\n            self.using,\n            elide_empty=self.elide_empty,\n        )\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(529,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/query.py',288,'Detected a Custom Expression \'\'self.get_compiler(DEFAULT_DB_ALIAS)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(530,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/query.py',1197,'Detected a Custom Expression \'\'self.get_compiler(connection=connection)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(531,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/models/sql/where.py',139,'Detected a Custom Expression \'\'self.__class__([lhs, rhs], AND, self.negated)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(532,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/db/utils.py',113,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(533,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/boundfield.py',13,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(534,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/boundfield.py',13,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(535,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/boundfield.py',305,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(536,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/boundfield.py',305,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(537,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/forms.py',313,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(538,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/forms.py',343,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(539,'go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/jinja2/django/forms/label.html',1,'Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.','Semgrep finding: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(540,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/renderers.py',29,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(541,'go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/templates/django/forms/label.html',1,'Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.','Semgrep finding: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(542,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/utils.py',75,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(543,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/widgets.py',61,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(544,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/widgets.py',61,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(545,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/widgets.py',94,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(546,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/forms/widgets.py',286,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(547,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/middleware/csrf.py',283,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(548,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/middleware/security.py',30,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(549,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/shortcuts.py',25,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(550,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/backends/django.py',99,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(551,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/backends/django.py',128,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(552,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/base.py',734,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(553,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/base.py',744,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(554,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/base.py',832,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(555,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/base.py',854,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(556,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',50,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(557,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',61,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(558,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',72,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(559,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',86,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(560,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',95,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(561,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',185,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(562,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',213,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(563,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',223,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(564,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',230,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(565,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',244,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(566,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',247,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(567,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',266,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(568,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',277,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(569,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',296,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(570,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',304,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(571,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',315,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(572,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',329,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(573,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',343,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(574,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',381,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(575,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',385,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(576,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',388,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(577,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',397,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(578,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',409,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(579,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',416,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(580,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',423,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(581,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',430,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(582,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',444,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(583,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',453,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(584,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',460,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(585,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',471,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(586,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',480,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(587,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',483,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(588,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',494,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(589,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',497,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(590,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',501,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(591,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',504,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(592,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',511,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(593,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',514,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(594,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',597,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(595,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',606,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(596,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',609,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(597,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',641,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(598,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',647,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(599,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',665,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(600,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',733,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(601,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',895,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(602,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',980,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(603,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaultfilters.py',986,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(604,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaulttags.py',55,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(605,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaulttags.py',245,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(606,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/defaulttags.py',1436,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(607,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/library.py',374,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(608,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/loader_tags.py',79,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(609,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/template/loaders/cached.py',96,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(\"|\".join(values).encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(610,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',96,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(611,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',391,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(612,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',464,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(613,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',470,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(614,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',480,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(615,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',481,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(616,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',485,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(617,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/templatetags/i18n.py',492,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(618,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/urls/conf.py',38,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(619,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/urls/resolvers.py',102,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(620,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/urls/resolvers.py',708,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(621,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/urls/utils.py',32,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(622,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/urls/utils.py',35,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(623,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/deconstruct.py',33,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(624,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/formats.py',84,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(625,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',59,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(626,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',82,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(627,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',85,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(628,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',112,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(629,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',129,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(630,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',340,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(631,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',343,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(632,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',347,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(633,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/html.py',481,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(634,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/module_loading.py',15,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(635,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/module_loading.py',58,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(636,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/numberformat.py',29,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(637,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/numberformat.py',37,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(638,'python.django.security.audit.xss.html-magic-method.html-magic-method','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/safestring.py',16,'The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-magic-method.html-magic-method','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(639,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/translation/trans_real.py',389,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(640,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/utils/translation/trans_real.py',401,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(641,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/csrf.py',160,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(642,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/debug.py',68,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(643,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/debug.py',634,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(644,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/debug.py',647,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(645,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/decorators/http.py',34,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(646,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',64,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(647,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',79,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(648,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',96,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(649,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',99,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(650,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',116,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(651,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',121,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(652,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',144,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(653,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/defaults.py',147,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(654,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/generic/base.py',147,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(655,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/i18n.py',321,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(656,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/static.py',64,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(657,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/static.py',67,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(658,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/static.py',110,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(659,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/templates/default_urlconf.html',206,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(660,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/env/lib/python3.8/site-packages/django/views/templates/default_urlconf.html',221,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(661,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/cache.py',36,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(662,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/cache.py',80,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(663,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/commands/__init__.py',96,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(664,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',57,'Detected a python logger call with a potential hardcoded secret \"Getting credentials from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(665,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',64,'Detected a python logger call with a potential hardcoded secret \"Getting password from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(666,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',121,'Detected a python logger call with a potential hardcoded secret \"Found credentials in url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(667,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',137,'Detected a python logger call with a potential hardcoded secret \"Found credentials in index url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(668,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',144,'Detected a python logger call with a potential hardcoded secret \"Found credentials in netrc for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(669,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',155,'Detected a python logger call with a potential hardcoded secret \"Found credentials in keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(670,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',281,'Detected a python logger call with a potential hardcoded secret \'401 Error, Credentials not correct for %s\' being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(671,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/network/auth.py',296,'The password on \'keyring\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(*creds, user=keyring):\n                    keyring.set_password(*creds)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(672,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/req/req_tracker.py',93,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(673,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/self_outdated_check.py',82,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(674,'python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/utils/unpacking.py',148,'These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.','Semgrep finding: python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(675,'python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pip/_internal/utils/unpacking.py',232,'These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.','Semgrep finding: python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(676,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(677,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(678,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(679,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(680,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',1462,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(681,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pkg_resources/__init__.py',1469,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(682,'python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pymysql/_auth.py',153,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','SHA256','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(683,'python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pymysql/_auth.py',154,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','SHA256','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(684,'python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/pymysql/connections.py',399,'The \'ssl\' module disables insecure cipher suites by default. Therefore, use of \'set_ciphers()\' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.','Semgrep finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(685,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/pymysql/cursors.py',215,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(686,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/env/lib/python3.8/site-packages/pymysql/cursors.py',220,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(687,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/build_meta.py',142,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(688,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/command/bdist_egg.py',422,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(689,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/command/easy_install.py',1076,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(690,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/command/easy_install.py',1080,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(691,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/config.py',349,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(692,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/depends.py',112,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(693,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/depends.py',172,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(694,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/launch.py',31,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(695,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/monkey.py',151,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(696,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/package_index.py',1113,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(697,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/sandbox.py',45,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(698,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/sandbox.py',107,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(699,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/sandbox.py',107,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(700,'python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/setuptools/ssl_support.py',194,'\'ssl.wrap_socket()\' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using \'ssl.SSLContext()\' and use that to wrap a socket.','Semgrep finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(701,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/typing_extensions.py',4284,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(702,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/env/lib/python3.8/site-packages/typing_extensions.py',4376,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(703,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/MySQLdb/cursors.py',261,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(704,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/MySQLdb/cursors.py',266,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(705,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/certifi/core.py',16,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(706,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/certifi/core.py',51,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(707,'python.lang.compatibility.python36.python36-compatibility-Popen1','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/click/_termui_impl.py',449,'the `errors` argument to Popen is only available on Python 3.6+','Semgrep finding: python.lang.compatibility.python36.python36-compatibility-Popen1','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(708,'python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/click/_termui_impl.py',451,'Found \'subprocess\' function \'Popen\' with \'shell=True\'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use \'shell=False\' instead.','Semgrep finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','False','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(709,'python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/click/_termui_impl.py',595,'Found \'subprocess\' function \'Popen\' with \'shell=True\'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use \'shell=False\' instead.','Semgrep finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','False','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(710,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/click/parser.py',519,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(711,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',111,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(712,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',123,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(713,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',178,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(714,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',193,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(715,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',210,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(716,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/apps/config.py',269,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(717,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/conf/__init__.py',166,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(718,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/helpers.py',161,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(719,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/helpers.py',191,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(720,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/helpers.py',197,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(721,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/options.py',381,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(722,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/options.py',383,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(723,'python.django.security.injection.open-redirect.open-redirect','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/options.py',1494,'Data from request (redirect_url) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.','Semgrep finding: python.django.security.injection.open-redirect.open-redirect','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(724,'python.django.security.injection.open-redirect.open-redirect','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/options.py',1562,'Data from request (redirect_url) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.','Semgrep finding: python.django.security.injection.open-redirect.open-redirect','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(725,'javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/static/admin/js/inlines.js',26,'RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.','Semgrep finding: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(726,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/actions.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(727,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/actions.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(728,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/app_list.html',8,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(729,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/auth/user/change_password.html',30,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(730,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/auth/user/change_password.html',34,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(731,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/auth/user/change_password.html',36,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(732,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_form.html',22,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(733,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_form.html',44,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(734,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_list.html',53,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(735,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_list.html',62,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(736,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_list_object_tools.html',8,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(737,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/change_list_results.html',17,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(738,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',25,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(739,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',30,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(740,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_confirmation.html',35,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(741,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(742,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',26,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(743,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/delete_selected_confirmation.html',29,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(744,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/filter.html',4,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(745,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/login.html',24,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(746,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/login.html',40,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(747,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/login.html',47,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(748,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/object_history.html',49,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(749,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/search_form.html',9,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(750,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/search_form.html',9,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(751,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',11,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(752,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(753,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',27,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(754,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/admin/widgets/related_widget_wrapper.html',34,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(755,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_change_form.html',4,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(756,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_change_form.html',27,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(757,'python.django.security.audit.xss.template-autoescape-off.template-autoescape-off','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',1,'Detected a template block where autoescaping is explicitly disabled with \'{% autoescape off %}\'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.','Semgrep finding: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(758,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',2,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(759,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_reset_email.html',12,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(760,'python.django.security.django-no-csrf-token.django-no-csrf-token','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templates/registration/password_reset_form.html',17,'Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.','Semgrep finding: python.django.security.django-no-csrf-token.django-no-csrf-token','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(761,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templatetags/admin_list.py',103,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(762,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templatetags/admin_list.py',256,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(763,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templatetags/admin_list.py',306,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(764,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templatetags/admin_list.py',337,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(765,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admin/templatetags/admin_list.py',511,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(766,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/bookmarklets.html',15,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(767,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',14,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(768,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',17,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(769,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/missing_docutils.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(770,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/model_detail.html',21,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(771,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',13,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(772,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(773,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/template_detail.html',19,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(774,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/template_filter_index.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(775,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/template_tag_index.html',23,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(776,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/view_detail.html',12,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(777,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',16,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(778,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',40,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(779,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',42,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(780,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/templates/admin_doc/view_index.html',49,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(781,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/utils.py',92,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(782,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/utils.py',268,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(783,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/views.py',180,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(784,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/admindocs/views.py',187,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(785,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/base_user.py',107,'The password on \'self\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(raw_password, user=self):\n                self.set_password(raw_password)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(786,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/base_user.py',118,'The password on \'self\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(raw_password, user=self):\n                self.set_password(raw_password)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(787,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/forms.py',152,'The password on \'user\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(self.cleaned_data[password_field_name], user=user):\n            user.set_password(self.cleaned_data[password_field_name])','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(788,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/forms.py',436,'Detected a python logger call with a potential hardcoded secret \"Failed to send password reset email to %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(789,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/hashers.py',225,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(790,'python.lang.security.audit.md5-used-as-password.md5-used-as-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/hashers.py',658,'It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.','Semgrep finding: python.lang.security.audit.md5-used-as-password.md5-used-as-password','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(791,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/management/commands/changepassword.py',79,'The password on \'u\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(p1, user=u):\n            u.set_password(p1)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(792,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/auth/templates/registration/password_reset_subject.txt',2,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(793,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/contenttypes/views.py',86,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(794,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/flatpages/views.py',67,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(795,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/flatpages/views.py',68,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(796,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/flatpages/views.py',70,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(797,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/mysql/introspection.py',17,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(798,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/mysql/introspection.py',17,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(799,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/oracle/operations.py',54,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(800,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/oracle/schema.py',72,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(801,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/oracle/schema.py',85,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(802,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/postgis/operations.py',43,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(803,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/postgis/operations.py',99,'Found extension of custom expression: ST_Polygon. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(804,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/postgis/operations.py',334,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(805,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/postgis/operations.py',334,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(806,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',21,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(807,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',157,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(808,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/operations.py',157,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(809,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',69,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(810,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',76,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(811,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',101,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(812,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',148,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(813,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',160,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(814,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',173,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(815,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/backends/spatialite/schema.py',184,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(816,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/aggregates.py',25,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(817,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/aggregates.py',46,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(818,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/aggregates.py',47,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(819,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',68,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(820,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',110,'Found extension of custom expression: GeoFunc. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(821,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',138,'Detected a Custom Expression \'\'copy\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(822,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',154,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(823,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',171,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(824,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',177,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(825,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',207,'Detected a Custom Expression \'\'super(AsGeoJSON, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(826,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',230,'Detected a Custom Expression \'\'super(AsGML, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(827,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',347,'Detected a Custom Expression \'\'super(Distance, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(828,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',358,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(829,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',387,'Detected a Custom Expression \'\'super(FromWKB, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(830,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',408,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(831,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',453,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(832,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',468,'Detected a Custom Expression \'\'super(Length, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(833,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',476,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(834,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',516,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(835,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/functions.py',521,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(836,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/gis/db/models/lookups.py',90,'Detected a Custom Expression \'\'rhs_op\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(837,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/humanize/templatetags/humanize.py',23,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(838,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/humanize/templatetags/humanize.py',63,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(839,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/humanize/templatetags/humanize.py',66,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(840,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/humanize/templatetags/humanize.py',150,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(841,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/messages/storage/cookie.py',38,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(842,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/aggregates/mixins.py',56,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(843,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/constraints.py',91,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(844,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/expressions.py',6,'Found extension of custom expression: ArraySubquery. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(845,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/fields/ranges.py',29,'Found extension of custom expression: RangeBoundary. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(846,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/functions.py',4,'Found extension of custom expression: RandomUUID. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(847,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/functions.py',9,'Found extension of custom expression: TransactionNow. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(848,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/indexes.py',237,'Found extension of custom expression: OpClass. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(849,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',28,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(850,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',28,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(851,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',48,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(852,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',48,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(853,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',200,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(854,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',200,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(855,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',211,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(856,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',211,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(857,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',300,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(858,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',322,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(859,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/operations.py',322,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(860,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',47,'Found extension of custom expression: SearchConfig. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(861,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',90,'Found extension of custom expression: SearchVector. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(862,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',137,'Detected a Custom Expression \'\'super(SearchVector, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(863,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',188,'Found extension of custom expression: SearchQuery. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(864,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',219,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(865,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',243,'Found extension of custom expression: SearchRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(866,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',276,'Found extension of custom expression: SearchHeadline. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(867,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',328,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(868,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',341,'Found extension of custom expression: TrigramBase. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(869,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/postgres/search.py',350,'Found extension of custom expression: TrigramWordBase. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(870,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/sessions/management/commands/clearsessions.py',14,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(871,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/sessions/middleware.py',15,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(872,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/contrib/sitemaps/views.py',63,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(873,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',69,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(874,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',96,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(875,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',121,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(876,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',121,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(877,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',133,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(878,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',143,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(879,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',169,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(880,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',177,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(881,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',188,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(882,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',224,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(883,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',245,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(884,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',263,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(885,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',275,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(886,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',280,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(887,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',294,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(888,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/db.py',294,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(889,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/filebased.py',37,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(890,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/filebased.py',44,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(891,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/filebased.py',45,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(892,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/filebased.py',70,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(893,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/filebased.py',154,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(894,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/locmem.py',28,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(895,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/locmem.py',43,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(896,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/locmem.py',54,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(897,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/locmem.py',73,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(898,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/locmem.py',75,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(899,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/redis.py',22,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(900,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/cache/backends/redis.py',28,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(901,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/management/__init__.py',48,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(902,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/management/commands/shell.py',88,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(903,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/management/commands/shell.py',178,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(904,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/management/commands/shell.py',247,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(905,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/management/commands/shell.py',257,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(906,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/serializers/__init__.py',72,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(907,'python.lang.compatibility.python37.python37-compatibility-math1','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/core/validators.py',467,'math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate a - offset - n* b.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-math1','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(908,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',190,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(909,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',190,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(910,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',228,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(911,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',228,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(912,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',327,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(913,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/creation.py',327,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(914,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/operations.py',392,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(915,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',547,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(916,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',687,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(917,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',701,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(918,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',711,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(919,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',775,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(920,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',789,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(921,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',829,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(922,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',1165,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(923,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',1180,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(924,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',1192,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(925,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',1250,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(926,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',1297,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(927,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/base/schema.py',2046,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(928,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/base.py',345,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(929,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/base.py',345,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(930,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/compiler.py',30,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(931,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/compiler.py',49,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(932,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/creation.py',55,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(933,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/creation.py',55,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(934,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/introspection.py',154,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(935,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/introspection.py',154,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(936,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/introspection.py',332,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(937,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/introspection.py',332,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(938,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/mysql/schema.py',119,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(939,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/base.py',322,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(940,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/base.py',336,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(941,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/creation.py',333,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(942,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/features.py',194,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(943,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/functions.py',4,'Found extension of custom expression: IntervalToSeconds. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(944,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/functions.py',19,'Found extension of custom expression: SecondsToInterval. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(945,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/introspection.py',179,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(946,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/introspection.py',179,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(947,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/operations.py',353,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(948,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/operations.py',353,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(949,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',54,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(950,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',54,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(951,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',144,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(952,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',144,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(953,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',231,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(954,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/oracle/schema.py',231,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(955,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/postgresql/creation.py',83,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(956,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/postgresql/creation.py',83,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(957,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/postgresql/introspection.py',112,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(958,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/postgresql/introspection.py',112,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(959,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/postgresql/schema.py',208,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(960,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/_functions.py',447,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','sha256(text.encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(961,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/_functions.py',453,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(962,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',276,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(963,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',276,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(964,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',288,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(965,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',288,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(966,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',295,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(967,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',332,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(968,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py',332,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(969,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',93,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(970,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',93,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(971,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',159,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(972,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',159,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(973,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',175,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(974,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',175,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(975,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',341,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(976,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',341,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(977,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',364,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(978,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/introspection.py',364,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(979,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/operations.py',177,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(980,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/schema.py',253,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(981,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/schema.py',253,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(982,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/schema.py',286,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(983,'python.lang.security.audit.formatted-sql-query.formatted-sql-query','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/schema.py',456,'Detected possible formatted SQL query. Use parameterized queries instead.','Semgrep finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(984,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/backends/sqlite3/schema.py',456,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(985,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/loader.py',86,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(986,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/loader.py',120,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(987,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/questioner.py',45,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(988,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/questioner.py',168,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(989,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/writer.py',226,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(990,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/migrations/writer.py',251,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(991,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/aggregates.py',26,'Found extension of custom expression: Aggregate. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(992,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/aggregates.py',117,'Detected a Custom Expression \'\'self.filter\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(993,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/aggregates.py',124,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(994,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/aggregates.py',138,'Detected a Custom Expression \'\'super(Aggregate, copy)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(995,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/aggregates.py',141,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(996,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/constraints.py',246,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(997,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/constraints.py',492,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(998,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',29,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(999,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',823,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1000,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',839,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1001,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1382,'Detected a Custom Expression \'\'col\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1002,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1456,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1003,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1460,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1004,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1533,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1005,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1782,'Detected a Custom Expression \'\'self.query\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1006,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1812,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1007,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1900,'Detected a Custom Expression \'\'copy\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1008,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1901,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1009,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',1987,'Detected a Custom Expression \'\'self.partition_by\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1010,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/expressions.py',2020,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1011,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/json.py',242,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1012,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/json.py',272,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1013,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/json.py',499,'Detected a Custom Expression \'\'HasKeyOrArrayIndex(self.lhs.lhs, self.lhs.key_name)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1014,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/json.py',567,'Detected a Custom Expression \'\'is_null_expr\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1015,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/json.py',572,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1016,'python.django.security.audit.query-set-extra.avoid-query-set-extra','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/related_descriptors.py',1187,'QuerySet.extra\' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using \'.extra\', use the Django ORM and parameterized queries such as `People.objects.get(name=\'Bob\')`.','Semgrep finding: python.django.security.audit.query-set-extra.avoid-query-set-extra','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1017,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/related_lookups.py',94,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1018,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/related_lookups.py',127,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1019,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',26,'Found extension of custom expression: Tuple. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1020,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',123,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1021,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',129,'Detected a Custom Expression \'\'super(TupleLookupMixin, self)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1022,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',137,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1023,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',159,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1024,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',187,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1025,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',215,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1026,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',243,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1027,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',271,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1028,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',367,'Detected a Custom Expression \'\'super(TupleLookupMixin, self)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1029,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/fields/tuple_lookups.py',384,'Detected a Custom Expression \'\'root\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1030,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',7,'Found extension of custom expression: Cast. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1031,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',18,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1032,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',25,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1033,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',33,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1034,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',36,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1035,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',47,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1036,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',53,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1037,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',64,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1038,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',67,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1039,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',70,'Found extension of custom expression: Coalesce. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1040,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',99,'Detected a Custom Expression \'\'super(Coalesce, clone)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1041,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',100,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1042,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',103,'Found extension of custom expression: Collate. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1043,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',119,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1044,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',122,'Found extension of custom expression: Greatest. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1045,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',143,'Found extension of custom expression: Least. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1046,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',164,'Found extension of custom expression: NullIf. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1047,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/comparison.py',172,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1048,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/datetime.py',214,'Found extension of custom expression: Now. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1049,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/datetime.py',222,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1050,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/datetime.py',227,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1051,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/datetime.py',232,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1052,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/datetime.py',240,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1053,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',8,'Found extension of custom expression: JSONArray. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1054,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',17,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1055,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',26,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1056,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',57,'Detected a Custom Expression \'\'casted_obj\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1057,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',68,'Found extension of custom expression: JSONObject. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1058,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',83,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1059,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',91,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1060,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/json.py',116,'Detected a Custom Expression \'\'super(JSONObject, copy)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1061,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',33,'Found extension of custom expression: ATan2. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1062,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',41,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1063,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',58,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1064,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',66,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1065,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',79,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1066,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',89,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1067,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',112,'Found extension of custom expression: Log. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1068,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',118,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1069,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',123,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1070,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',126,'Found extension of custom expression: Mod. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1071,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',131,'Found extension of custom expression: Pi. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1072,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',136,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1073,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',141,'Found extension of custom expression: Power. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1074,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',151,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1075,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',159,'Found extension of custom expression: Random. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1076,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',164,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1077,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',167,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1078,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/math.py',172,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1079,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/mixins.py',25,'Detected a Custom Expression \'\'clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1080,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/mixins.py',30,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1081,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/mixins.py',52,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1082,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',10,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1083,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',20,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1084,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',33,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1085,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',48,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1086,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',57,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1087,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',65,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1088,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',68,'Found extension of custom expression: ConcatPair. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1089,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',78,'Detected a Custom Expression \'\'super(ConcatPair, coalesced)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1090,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',104,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1091,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',124,'Found extension of custom expression: Concat. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1092,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',153,'Found extension of custom expression: Left. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1093,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',186,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1094,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',196,'Found extension of custom expression: LPad. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1095,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',226,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1096,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',229,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1097,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',232,'Found extension of custom expression: Repeat. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1098,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',249,'Detected a Custom Expression \'\'rpad\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1099,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',252,'Found extension of custom expression: Replace. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1100,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',267,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1101,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',329,'Found extension of custom expression: StrIndex. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1102,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',341,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1103,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',344,'Found extension of custom expression: Substr. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1104,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',363,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1105,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/text.py',366,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1106,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',19,'Found extension of custom expression: CumeDist. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1107,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',25,'Found extension of custom expression: DenseRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1108,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',31,'Found extension of custom expression: FirstValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1109,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',37,'Found extension of custom expression: LagLeadFunction. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1110,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',64,'Found extension of custom expression: LastValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1111,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',74,'Found extension of custom expression: NthValue. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1112,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',94,'Found extension of custom expression: Ntile. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1113,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',105,'Found extension of custom expression: PercentRank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1114,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',111,'Found extension of custom expression: Rank. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1115,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/functions/window.py',117,'Found extension of custom expression: RowNumber. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1116,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/indexes.py',91,'Detected a Custom Expression \'\'where\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1117,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/indexes.py',215,'Found extension of custom expression: IndexExpression. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1118,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/indexes.py',299,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1119,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',31,'Found extension of custom expression: Lookup. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1120,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',163,'Detected a Custom Expression \'\'lookup\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1121,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',208,'Found extension of custom expression: Transform. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1122,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',426,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1123,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',575,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1124,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',704,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1125,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/lookups.py',747,'Detected a Custom Expression \'\'super()\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1126,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/manager.py',63,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1127,'python.django.security.audit.extends-custom-expression.extends-custom-expression','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',31,'Found extension of custom expression: PositionRef. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.extends-custom-expression.extends-custom-expression','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1128,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',264,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1129,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',442,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1130,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',455,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1131,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',462,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1132,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',577,'Detected a Custom Expression \'\'node\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1133,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',642,'Detected a Custom Expression \'\'compiler\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1134,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',713,'Detected a Custom Expression \'\'inner_query_compiler\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1135,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',967,'Detected a Custom Expression \'\'select_clone\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1136,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',1610,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1137,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',1881,'Detected a Custom Expression \'\'self\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1138,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',1977,'Detected a Custom Expression \'\'innerq.get_compiler(connection=self.connection)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1139,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',1978,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1140,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/compiler.py',2156,'Detected a Custom Expression \'\'self.query.inner_query.get_compiler(\n            self.using,\n            elide_empty=self.elide_empty,\n        )\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1141,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/query.py',350,'Detected a Custom Expression \'\'self.get_compiler(DEFAULT_DB_ALIAS)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1142,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/query.py',1293,'Detected a Custom Expression \'\'self.get_compiler(connection=connection)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1143,'python.django.security.audit.raw-query.avoid-raw-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/query.py',2520,'Detected the use of \'RawSQL\' or \'raw\' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=\'Bob\')`','Semgrep finding: python.django.security.audit.raw-query.avoid-raw-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1144,'python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/models/sql/where.py',145,'Detected a Custom Expression \'\'self.__class__([lhs, rhs], AND, self.negated)\'\' calling \'\'as_sql(...).\'\' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.','Semgrep finding: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1145,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/db/utils.py',113,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1146,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/boundfield.py',326,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1147,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/boundfield.py',326,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1148,'go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/jinja2/django/forms/label.html',1,'Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.','Semgrep finding: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1149,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/renderers.py',31,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1150,'go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/templates/django/forms/label.html',1,'Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.','Semgrep finding: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1151,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/utils.py',55,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1152,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',65,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1153,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',65,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1154,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',112,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1155,'python.django.security.audit.xss.html-safe.html-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',112,'`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-safe.html-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1156,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',145,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1157,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/forms/widgets.py',335,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1158,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/middleware/csrf.py',278,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1159,'python.django.security.injection.tainted-url-host.tainted-url-host','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/middleware/security.py',30,'User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server running this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts, or hardcode the correct host.','Semgrep finding: python.django.security.injection.tainted-url-host.tainted-url-host','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1160,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/shortcuts.py',26,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1161,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/backends/django.py',145,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1162,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/backends/django.py',174,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1163,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/base.py',741,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1164,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/base.py',751,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1165,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/base.py',839,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1166,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/base.py',861,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1167,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',49,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1168,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',60,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1169,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',71,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1170,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',85,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1171,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',94,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1172,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',184,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1173,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',212,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1174,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',222,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1175,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',229,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1176,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',243,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1177,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',246,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1178,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',265,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1179,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',276,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1180,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',295,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1181,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',303,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1182,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',314,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1183,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',328,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1184,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',342,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1185,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',380,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1186,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',384,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1187,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',387,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1188,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',396,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1189,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',408,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1190,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',415,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1191,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',422,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1192,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',429,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1193,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',443,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1194,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',452,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1195,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',459,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1196,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',469,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1197,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',480,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1198,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',489,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1199,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',492,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1200,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',503,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1201,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',506,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1202,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',510,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1203,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',513,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1204,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',520,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1205,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',523,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1206,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',606,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1207,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',616,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1208,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',619,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1209,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',637,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1210,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',646,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1211,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',664,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1212,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',732,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1213,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',894,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1214,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',979,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1215,'python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaultfilters.py',985,'Detected Django filters flagged with \'is_safe\'. \'is_safe\' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, \'is_safe\' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing \'is_safe\' and explicitly marking safe content with \'mark_safe()\'.','Semgrep finding: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1216,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaulttags.py',58,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1217,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaulttags.py',250,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1218,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/defaulttags.py',1485,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1219,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/library.py',477,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1220,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/loader_tags.py',81,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1221,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/template/loaders/cached.py',96,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(\"|\".join(values).encode())','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1222,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',96,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1223,'python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',391,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1224,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',464,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1225,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',470,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1226,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',480,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1227,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',481,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1228,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',485,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1229,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/templatetags/i18n.py',492,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1230,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/urls/conf.py',39,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1231,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/urls/resolvers.py',105,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1232,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/urls/resolvers.py',711,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1233,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/urls/utils.py',32,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1234,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/urls/utils.py',35,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1235,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/deconstruct.py',33,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1236,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/formats.py',84,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1237,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',84,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1238,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',107,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1239,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',110,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1240,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',145,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1241,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',162,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1242,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',379,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1243,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',382,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1244,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',386,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1245,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/html.py',509,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1246,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/module_loading.py',15,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1247,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/module_loading.py',58,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1248,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/numberformat.py',29,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1249,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/numberformat.py',37,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1250,'python.django.security.audit.xss.html-magic-method.html-magic-method','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/safestring.py',16,'The `__html__` method indicates to the Django template engine that the value is \'safe\' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.','Semgrep finding: python.django.security.audit.xss.html-magic-method.html-magic-method','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1251,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/translation/trans_real.py',388,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1252,'python.django.security.audit.avoid-mark-safe.avoid-mark-safe','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/utils/translation/trans_real.py',400,'\'mark_safe()\' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use \'django.utils.html.format_html()\' to build HTML for rendering instead.','Semgrep finding: python.django.security.audit.avoid-mark-safe.avoid-mark-safe','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1253,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/csrf.py',70,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1254,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/csrf.py',80,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1255,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/debug.py',70,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1256,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/debug.py',652,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1257,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/debug.py',665,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1258,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/decorators/http.py',39,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1259,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/decorators/http.py',55,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1260,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',64,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1261,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',79,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1262,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',96,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1263,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',99,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1264,'python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',112,'Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method \'render_template()\' and templates with a \'.html\' extension in order to prevent XSS.','Semgrep finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1265,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',117,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1266,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',122,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1267,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',145,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1268,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/defaults.py',148,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1269,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/generic/base.py',147,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1270,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/i18n.py',227,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1271,'python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/static.py',100,'Detected data rendered directly to the end user via \'HttpResponse\' or a similar object. This bypasses Django\'s built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django\'s template engine to safely render HTML.','Semgrep finding: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1272,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/templates/default_urlconf.html',206,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1273,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/templates/default_urlconf.html',208,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1274,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/templates/directory_index.html',8,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1275,'python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/django/views/templates/directory_index.html',11,'Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.','Semgrep finding: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1276,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/_core/_methods.py',248,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1277,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/_core/_methods.py',251,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1278,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/_core/multiarray.py',92,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1279,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/distutils/fcompiler/gnu.py',402,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256()','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1280,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/distutils/misc_util.py',157,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1281,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/distutils/misc_util.py',163,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1282,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/distutils/misc_util.py',847,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1283,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/auxfuncs.py',619,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1284,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/auxfuncs.py',627,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1285,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/capi_maps.py',157,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1286,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/capi_maps.py',295,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1287,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/capi_maps.py',451,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1288,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',1330,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1289,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',2282,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1290,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',2574,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1291,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',2652,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1292,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',2661,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1293,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',2929,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1294,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',3000,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1295,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',3031,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1296,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',3363,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1297,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/f2py/crackfortran.py',3489,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1298,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/_datasource.py',333,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1299,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/_datasource.py',475,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1300,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/_npyio_impl.py',491,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1301,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/_npyio_impl.py',493,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1302,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/format.py',743,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1303,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/lib/format.py',820,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1304,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/ma/timer_comparison.py',441,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1305,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/testing/_private/utils.py',1294,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1306,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/numpy/testing/_private/utils.py',1580,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1307,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/cache.py',26,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1308,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/commands/__init__.py',109,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1309,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/commands/search.py',5,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1310,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',52,'Detected a python logger call with a potential hardcoded secret \"Getting credentials from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1311,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',59,'Detected a python logger call with a potential hardcoded secret \"Getting password from keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1312,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',124,'Detected a python logger call with a potential hardcoded secret \"Found credentials in url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1313,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',140,'Detected a python logger call with a potential hardcoded secret \"Found credentials in index url for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1314,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',147,'Detected a python logger call with a potential hardcoded secret \"Found credentials in netrc for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1315,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',160,'Detected a python logger call with a potential hardcoded secret \"Found credentials in keyring for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1316,'python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',305,'Detected a python logger call with a potential hardcoded secret \"401 Error, Credentials not correct for %s\" being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.','Semgrep finding: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1317,'python.django.security.audit.unvalidated-password.unvalidated-password','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/auth.py',321,'The password on \'keyring\' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.','Semgrep finding: python.django.security.audit.unvalidated-password.unvalidated-password','if django.contrib.auth.password_validation.validate_password(*creds, user=keyring):\n                    keyring.set_password(*creds)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1318,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/xmlrpc.py',6,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1319,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/network/xmlrpc.py',14,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1320,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/req/req_tracker.py',73,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1321,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/self_outdated_check.py',28,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1322,'python.lang.compatibility.python36.python36-compatibility-Popen1','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/utils/subprocess.py',141,'the `errors` argument to Popen is only available on Python 3.6+','Semgrep finding: python.lang.compatibility.python36.python36-compatibility-Popen1','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1323,'python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_internal/utils/unpacking.py',93,'These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.','Semgrep finding: python.lang.security.audit.insecure-file-permissions.insecure-file-permissions','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1324,'python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http','LOW','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/cachecontrol/_cmd.py',27,'Detected a request using \'http://\'. This request will be unencrypted. Use \'https://\' instead.','Semgrep finding: python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1325,'python.lang.security.audit.sha224-hash.sha224-hash','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py',103,'This code uses a 224-bit hash function, which is deprecated or disallowed in some security policies. Consider updating to a stronger hash function such as SHA-384 or higher to ensure compliance and security.','Semgrep finding: python.lang.security.audit.sha224-hash.sha224-hash','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1326,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/cachecontrol/serialize.py',148,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1327,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/certifi/core.py',28,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1328,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/distlib/compat.py',42,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1329,'python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/distlib/compat.py',83,'Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.','Semgrep finding: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1330,'python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/distlib/util.py',1531,'The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.','Semgrep finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1331,'python.lang.compatibility.python37.python37-compatibility-importlib2','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/__init__.py',10,'Found \'importlib.resources\', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.','Semgrep finding: python.lang.compatibility.python37.python37-compatibility-importlib2','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1332,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py',89,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1333,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pep517/in_process/_in_process.py',339,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1334,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1335,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',146,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1336,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1337,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',153,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1338,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',1462,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1339,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pkg_resources/__init__.py',1469,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1340,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/platformdirs/__init__.py',29,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1341,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pygments/formatters/__init__.py',101,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1342,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pygments/lexers/__init__.py',140,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1343,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pygments/unistring.py',83,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1344,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/pygments/unistring.py',90,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1345,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/requests/auth.py',154,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(x)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1346,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/requests/auth.py',198,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(s)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1347,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/rich/style.py',193,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1348,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/rich/style.py',260,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1349,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/rich/style.py',490,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1350,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/rich/style.py',745,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1351,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',90,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1352,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',94,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1353,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py',97,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1354,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',163,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1355,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',168,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1356,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',173,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1357,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/contrib/securetransport.py',178,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1358,'python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/util/ssl_.py',179,'\'ssl.wrap_socket()\' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using \'ssl.SSLContext()\' and use that to wrap a socket.','Semgrep finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1359,'python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/urllib3/util/ssl_.py',292,'The \'ssl\' module disables insecure cipher suites by default. Therefore, use of \'set_ciphers()\' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.','Semgrep finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1360,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pip/_vendor/webencodings/mklabels.py',47,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1361,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',136,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1362,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',136,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1363,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',143,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1364,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',143,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1365,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',1453,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1366,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',1460,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1367,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pkg_resources/__init__.py',2229,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1368,'python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pymysql/_auth.py',153,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','SHA256','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1369,'python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pymysql/_auth.py',154,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','SHA256','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1370,'python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/pymysql/connections.py',399,'The \'ssl\' module disables insecure cipher suites by default. Therefore, use of \'set_ciphers()\' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.','Semgrep finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1371,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pymysql/cursors.py',215,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1372,'python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/pymysql/cursors.py',220,'Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.','Semgrep finding: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1373,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/requests/auth.py',154,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(x)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1374,'python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/requests/auth.py',198,'Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.','Semgrep finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1','hashlib.sha256(s)','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1375,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/_distutils/command/register.py',89,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1376,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/_distutils/command/upload.py',194,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1377,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/_distutils/core.py',230,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1378,'python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','HIGH','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/_distutils/cygwinccompiler.py',401,'Found \'subprocess\' function \'Popen\' with \'shell=True\'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use \'shell=False\' instead.','Semgrep finding: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true','False','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1379,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/_distutils/sysconfig.py',530,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1380,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/build_meta.py',158,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1381,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/command/bdist_egg.py',376,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1382,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/command/easy_install.py',1078,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1383,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/command/easy_install.py',1082,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1384,'python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/command/upload_docs.py',170,'The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.','Semgrep finding: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1385,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/config.py',422,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1386,'python.lang.security.audit.marshal.marshal-usage','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/depends.py',112,'The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security','Semgrep finding: python.lang.security.audit.marshal.marshal-usage','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1387,'python.lang.security.dangerous-globals-use.dangerous-globals-use','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/depends.py',172,'Found non static data as an index to \'globals()\'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use \'globals()\'.','Semgrep finding: python.lang.security.dangerous-globals-use.dangerous-globals-use','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1388,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/launch.py',32,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1389,'python.lang.security.audit.non-literal-import.non-literal-import','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/monkey.py',149,'Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.','Semgrep finding: python.lang.security.audit.non-literal-import.non-literal-import','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1390,'python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/package_index.py',1153,'Detected a dynamic value being used with urllib. urllib supports \'file://\' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the \'requests\' library instead.','Semgrep finding: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1391,'python.lang.security.audit.exec-detected.exec-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/sandbox.py',46,'Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.exec-detected.exec-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1392,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/sandbox.py',108,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1393,'python.lang.security.deserialization.pickle.avoid-pickle','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/setuptools/sandbox.py',108,'Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.','Semgrep finding: python.lang.security.deserialization.pickle.avoid-pickle','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1394,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/typing_extensions.py',4284,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1395,'python.lang.security.audit.eval-detected.eval-detected','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/typing_extensions.py',4376,'Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.','Semgrep finding: python.lang.security.audit.eval-detected.eval-detected','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1396,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/pyopenssl.py',90,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1397,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/pyopenssl.py',94,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1398,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/pyopenssl.py',97,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1399,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/securetransport.py',163,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1400,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/securetransport.py',168,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1401,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/securetransport.py',173,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1402,'python.lang.security.audit.weak-ssl-version.weak-ssl-version','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/contrib/securetransport.py',178,'An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use \'ssl.PROTOCOL_TLSv1_2\' or higher.','Semgrep finding: python.lang.security.audit.weak-ssl-version.weak-ssl-version','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1403,'python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/util/ssl_.py',179,'\'ssl.wrap_socket()\' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using \'ssl.SSLContext()\' and use that to wrap a socket.','Semgrep finding: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1),(1404,'python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','MEDIUM','/src/ai-evaluator/venv/lib/python3.10/site-packages/urllib3/util/ssl_.py',292,'The \'ssl\' module disables insecure cipher suites by default. Therefore, use of \'set_ciphers()\' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.','Semgrep finding: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers','','{\"tool\": \"semgrep\", \"impact\": \"\", \"confidence\": \"medium\", \"likelihood\": \"\"}',1);
/*!40000 ALTER TABLE `sast_report_vulnerabilityreport` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-09-29 14:50:04
